[
{
	"uri": "/about/",
	"title": "About",
	"tags": [],
	"description": "",
	"content": " 個人筆記收集整理\n之前用 Pelican Pelican\n後來有用過 Nikola, Hexo\n目前用 Hugo\nBlog commit log\nNetlify Hugo: After-dark\nCheatSheet emoji cheat sheet\nLOG 20180601\n 加入 Netlify.com 的設定 netlify.toml，hugo設定 把 theme 改成用 submodule , git submodule add git://github.com/chneukirchen/rack.git rack 把 theme 換成 docdock forestry.io(線上寫作工具) ,netlify(compile,net hosting) test  Ref:  StaticGen 靜態網站生成工具比較  "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/",
	"title": "Posts",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/reading-code-complete2nd/",
	"title": "Reading Code Complete 2nd",
	"tags": ["reading", "programming"],
	"description": "Code Complete 2nd reading",
	"content": "Code Complete 2nd 主要是講軟體工程方面的內容。通常簡寫為 cc2e\n 書名：CODE COMPLETE 2中文版：軟體開發實務指南（第二版）  原名：Code Complete: A Practical Handbook of Software Construction, Second Edition 博客來 Amazon 作者： Steve McConnell\n 譯者： 金戈, 湯凌, 陳碩, 張菲 出版社：博碩\n 出版日期：2018/11/23 語言：繁體中文 定價：1280元 ISBN：9789864341313 規格：平裝 / 912頁 / 18.5 x 23 cm / 普通級 / 單色印刷 / 二版 出版地：英國 本書分類：電腦資訊\u0026gt; 程式設計/APP開發\u0026gt; 軟體工程/遊戲開發   Task list: 😄\n初稿 再讀 筆記 完成  簡介 本書分為幾個部分：\n 第一部分 打好基礎 第二部分 建立高品質的程式碼 第三部分 變數 第四部分 語句 第五部分 程式碼改善 第六部分 系統考慮 第七部分 軟體工藝   主要是在軟體工程的內容，如何寫出好的程式碼。 而什麼是好的程式碼？易於維護、讓人容易理解的就是好的程式碼。 書中的例子，主要是用C++, Java 跟 VB.NET寫的。 多達約900頁的內容，可以先從有興趣的地方開始看。 本書還有準備了 Checklist 核對表，方便你在適用的場合，用來評估 自已專案的表現。 本書寫在時間是 2004 年，不過概念的東西不會差太多。  第一部分 打好基礎 1~4 章\n寫程式、蓋房子，本質上都是在建造一個東西。建築學中的概念也常常使用在軟體工程學中。 工程開始前，需要有的一些步驟：討論需求、建築藍圖、架構確認、資源管理、本地化、國際化， 使用者界面、效能、輸入輸出、容錯性。在真正動手前，考慮周到，之後才不會多走了錯路。 算是在 孫子兵法 中廟算的階段。\n第二部分 建立高品質的程式碼 5 Design in Construction\n軟體設計，在動手寫程式碼前，規劃軟體的架構，像是設計模式、使用者介面、資料庫存取、 耦合標準、高內聚力\n6 Working Classes\nClass 類別，很多物件導向的程式中常用到的。 抽象資料類別 ADTs，類別介面、為何要用 Class?，超越類別 Packages\n7 High-Quality Routines\nRoutines(子程式)：為了完成特別的功能而寫的方法， 可被呼叫。 程式中，一定有些動作會重複的做，把它分出來，需要時再呼叫，程式可以變的比較易讀，且有效率。 好的子程式名稱：描述子程式的功能，簡潔，對傳回值有所描述，動詞+受詞？命名要有一致性。 子程式要多長？200行以下會比較好。 如何使用子程式參數(傳入值)？\n8 Defensive Programming\n撰寫程式時，錯誤難免，但事前的一些規範，能有效的防止產出錯誤。 輸入資料檢查、斷言、錯誤處理、例外、隔離程式、輸助除錯的程式碼…\n9 The Pseudocode Programming Process\n Pseudocode(虛擬碼)，可以想作是思考的步驟。 Pseudocode Programming Process(PPP)有助於減少設計、編寫文件所需的工作。 如何寫好虛擬碼？ PPP的替代方案？重構，契約式設計，測式導行設計(TDD)  #第三部分 變數\n10 General Issues in Using Variables\n變數型態、作用範圍、持續時間…\n11 The Power of Variable Names\n 好的變數命名，可以增加易讀性。變數的資料型態、功能、作用範圍、前綴 命名要有一致性，避免和保留字太相近  12 Fundamental Data Types\n數值、整數、浮點數、字元字串、布林、列舉、具名常數、陣列\n13 Unusual Data Types\n 結構體：structin C++, Structure in Visual Basic ， 基本上是多種資料型態結合的自訂資料型態。 指標：直接操作記憶體的工具，Java, C#, 和 Visual Basic 都沒有提供指標。 指標強大，但也容易造成錯誤。 全域資料：程式中任何人都可以取用這個資料，所以容易被不對的子程式、不對的時間被 取用，錯誤就會常發生，不好管理。  #第四部分 語句\n14 Organizing Straight-Line Code\nStraight-Line Code(直線碼) : 指程式中不含任何循環或迴圈者。若需要重複某程式段，則依順序直接寫出其程式碼，而不用循環指令。\n15 Using Conditionals\nif-else, switch-case,\u0026hellip;\n16 Controlling Loops\nfor loop, while,\u0026hellip;\n17 Unusual Control Structures\nrecursive structure, goto clause, \u0026hellip;\n18 Table-Driven Methods\n用查表，來代替 if-else之類的設計模式。簡單的情境，或許 邏輯子句較方便。但是情境越複雜，查表法的好處也越大。\n19 General Control Issues\n布林運算、巢狀結構、結構化設計…\n#第五部分 程式碼改善\n程式寫作中、寫完後除錯，debug的過程\n20 The Software-Quality Landscape\n產品有要正確性(運作結果正常)，可用性(易學易用)，效率(運行速度可用)，… 測試方法，Alpha, Beta 測試，…\n21 Collaborative Construction\n 通常是團隊來完成一個產品， 所以人員協同合作分配，   Pair-Programming(結對程式設計)： 兩個程式設計師在一個電腦上共同工作。一個人輸入程式碼，而另一個人審查他輸入的每一行程式碼。\n 輸入程式碼的人稱作駕駛員，審查程式碼的人稱作觀察員（或導航員）。兩個程式設計師經常互換角色。\n  22 Developer Testing\nUnit-Test, Component Test, Intergration Test,Regression Test, System Test,\u0026hellip;\n23 Debugging\n除錯方式、方法，…\n24 Refactoring\n 重構(Refactoring): 指對軟體程式碼做任何更動以增加可讀性或者簡化結構而不影響輸出結果。\n  程式不可能一寫出來就是最完美的，常要經過多次修改，追加功能，減少功能， 除錯…\n25 Code-Tuning Strategies\nCode-Tuning 程式碼調整，和重構不同的是，通常為了增加程式的效率而作。 改寫程式邏輯、用新的運算法，…。為了快，而重寫。\n26 Code-Tuning Techniques\n本章著重在程式碼範圍的調整，較細節的部分。\n#第六部分 系統考慮\n27 How Program Size Affects Construction\n專案管理，團隊協調\n28 Managing Construction\n 需求變更，設計變更 程式碼變更：版本控制，備份 進度評估：甘特圖… 專業的專案管理人才  29 Integration\n整合，不同專案間的整合，不同團隊間的整合，不同公司間的整合，\n30 Programming Tools\n 設計工具：UML 原始碼工具：IDE, Editor,Compare tool, Merge tool, Code Formatter, Document, Refactor 可執行碼工具：Compiler, Builder, Libraries,Debug, Testing 工具導向的環境：OS 自行設計的工具：DRY, 自已寫工具 工具夢想世界：  #第七部分 軟體工藝\n31 Layout and Style\nCoding Style: 程式寫出來，要讓人看的懂。斷行、段落，註解…\n**32 Self-Documenting Code **\n 內部文件：通常是寫在程式碼內的註解。外部文件：另外寫的軟體操作說明書。 註解或不註解：註解是為了方便人了解程式，但是如果程式碼本身易於了解，註解或許就不是必要，反而增加閱讀量。 參考其他人的註解標準  **33 Personal Character **\n性格影響結果\n34 Themes in Software Craftsmanship\n以人為本\n35 Where to Find More Information\n 其他書、期刊、參考書目  筆記 900多頁這樣大略翻了一下，說的東西還真的是很多。軟體工程真的是教你如何寫程式走向架構軟體、 建造一個新的東西的學問。細讀可能還要很多時間，有空再來慢慢讀。\n參考連結  SteveMcConnell作者網站 【Code Complete 2nd Edition：軟體開發實務指南】怎麼讀這本 1.7 kg 重的經典磚塊書 "
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/programming/",
	"title": "programming",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/categories/programming/",
	"title": "programming",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/reading/",
	"title": "reading",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/python-how-to-work-with-pdf-in-python/",
	"title": "Python How to Work With PDF in Python",
	"tags": ["python", "pdf"],
	"description": "Reading article, python deals with PDF",
	"content": "閱讀利用 Python 來處理 PDF 的文章，並作簡單的筆記。\nTask list: 😄\n初稿 再讀 筆記 完成  概述 原文 How to Work With a PDF in Python\n文章大概分為幾個部分\n 簡介 python 內用來處理 PDF 的程式庫，及演進  pyPDF,pyPDF2,pyPDF4 pdfrw  安裝 提取 合併 分拆 加浮水印 加密 結論 進階閱讀  這篇文章大概就原文內容作摘要，加上一些心得筆記。或許之後有空來考慮翻譯？\n前言 PDF 可攜式文件格式, 是 Adobe 公司的文件規格，常見的文件交換格式。目前是 ISO 下的開放文件格式。\npython 下用來處理 PDF 的程式庫除了 pyPDFx 外，還有：\n pdfminer pdfquery PDFlib\u0026rsquo;s TET library with python binding Reportlab pdfrw  本文主要是以 pyPDFx 為主。\npyPDF 演進  最初的 pyPDF 是在2005 pyPDF2 最近失去維護，而 pyPDF4 跟 pyPDF2 不完全相容 本文主要以 pyPDF2 為主 pdfrw : 和 ReportLab 整合，有不少功能  安裝 $ pip install pypdf2 # 或是用 Anaconda $ conda install pypdf2 提取  可以用 pyPDF2 萃取出 metadata, 包括 Author,Creator,Producer,Subject ,Title,Number of Pages。 PyPDF2.PdfFileReader.getDocumentInfo() 來讀 pdf metadata PyPDF2.PdfFileReader.getNumPages() 來讀頁數 例子中 f-string ，可以參考文章 PyPDF2 中還有 .extractText() 用來讀內文，不過效果不好 要讀內文的話，建議用 PDFMiner  # extract_doc_info.py from PyPDF2 import PdfFileReader def extract_information(pdf_path): with open(pdf_path, \u0026#39;rb\u0026#39;) as f: pdf = PdfFileReader(f) information = pdf.getDocumentInfo() number_of_pages = pdf.getNumPages() txt = f\u0026#34;\u0026#34;\u0026#34; Information about {pdf_path}: Author: {information.author} Creator: {information.creator} Producer: {information.producer} Subject: {information.subject} Title: {information.title} Number of pages: {number_of_pages} \u0026#34;\u0026#34;\u0026#34; print(txt) return information if __name__ == \u0026#39;__main__\u0026#39;: path = \u0026#39;reportlab-sample.pdf\u0026#39; extract_information(path) 旋轉 PdfFileWriter.rotateClockwise(90) 寫入時，可以旋轉頁面。 .getPage() addPage()\nNote PyPDF2 只能以90度的倍數旋轉，其他的角度會得到 AssertionError \n合併 將兩個 pdf 文件合成一個檔案，像是把本文、加上封面、和封底。\n方式：讀進兩個文件的每一頁，一頁一頁寫進新的 pdf ，產生合併的新文檔。\n分拆 讀進各頁，把想分出去的頁數寫到新檔\n加浮水印 PdfFileReader.mergePage(浮水印pdf檔) 加上浮水印\n加密  PyPDF2 目前只能加密碼鎖上文件。 admin 有 read/write 的權限。user 只有 read 的權限 加密長度預設是 40bit  PdfFileWriter.encrypt(user_pwd=password, owner_pwd=None, use_128bit=True)\n結論 PyPDF2 功能不少，不過 取出文字的功能好像不太完美， 或許要看看其他程式庫。像是 PDFMiner\n進階閱讀 參考連結  How to Work With a PDF in Python f-string "
},
{
	"uri": "/tags/pdf/",
	"title": "pdf",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/python/",
	"title": "python",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/categories/technology/",
	"title": "technology",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/reading-stephen-king-on-writing/",
	"title": "Reading Stephen King on Writing",
	"tags": ["reading", "writing", "StephenKing"],
	"description": "A memoir of the craft",
	"content": "史蒂芬．金談寫作, 簡單讀後心得\nTask list: 😄\n初稿 再讀 筆記 完成  資料  史蒂芬．金談寫作 @ 博客來 On Writing: A Memoir Of The Craft @ Amazon-US  史蒂芬．金談寫作(On Writing: A Memoir Of The Craft)\n 作者： 史蒂芬．金 (Stephen King) 譯者： 出版社：商周出版\n 出版日期：2006/02/15 語言：繁體中文 定價：300元 優惠價：79折237元 ISBN：9574699978 叢書系列：普羅米修斯系列 規格：平裝 / 320頁 / 15 x 21 cm / 普通級 / 單色印刷 / 初版 出版地：台灣 本書分類：文學小說\u0026gt; 文學研究\u0026gt; 外國文學研究  前言  導讀  自傳式寫作、自我對話的回憶錄 前三章作者回憶中建構的世界、後幾章開始提及寫作技巧、訓練  序二  The Elements of Style 風格元素 William Strunk, E.B. White 其中的一章 作文的原則 上書的第十七條原則 \u0026ndash; 刪除不必要的文字 自傳 + 回憶錄 + 寫作建議   第一章：履歷  作者自傳、生活、回憶 The Liars\u0026rsquo; Club ( 大說謊家倶樂部 ) by Mary Karr  第二章：寫作是什麼？  寫作從少量開始  第三章：工具箱  文法  第四章：論寫作 後記：論生活 更多之一：關門，開門 更多之二：書單 Alert **this** is a text **Yeahhh !** is a text **Be carefull** is a text **Beware !** is a text attachments 建 page 同名的 page.file 目錄，下面可以放檔案\nbutton  go to google  Success  Info  Warning  Danger !  Danger !  children 例出下屬的 children 頁面列表，可以作出卡片式的 列表。\nexcerpt Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n　excerpt-include 從檔案引用內容\nexpand 可收起隱藏內容\n  Is this docdock theme rocks ?   Yes !.   icon  Mermaid mermaid.initialize({startOnLoad:true}); graph LR;\rA[Hard edge] --|Link text| B(Round edge)\rB -- C{Decision}\rC --|One| D[Result one]\rC --|Two| E[Result two]\r Notice Note A notice disclaimer \nInfo An information disclaimer \nTip A tip disclaimer \nWarning An warning disclaimer \npanel 可以把一些內容加框\nLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. panel footer  revealjs reveal.js Slide\n語法 樣式可以用 星號* 或是 底線_\n斜體 emphasis, aka italics, with asterisks or underscores. 粗體 Strong emphasis, aka bold, with asterisks or underscores. 合併 Combined emphasis with asterisks and underscores. 刪除線 Strikethrough uses two tildes. Scratch this.\n孔子說：\n 說什麼\n  定義是： 是什麼\n  目錄 第一種是手工的目錄\n目錄  概述  語法 目錄  區塊元素  標題 連結 圖片、其他、youtube 程式碼 參考連結   內文地方加上 概述的連結\n第二種是 After-Dark 內建目錄，在 標頭上加上 toc: = true，程式會把大的標題生成目錄\n區塊元素 ** List **\n AAA  BBB  CCC   what some soso  標題 Setext 形式是用底線的形式，利用 = （最高階標題）和 - （第二階標題），例如：\nThis is an H1 ============= This is an H2 -------------  任何數量的 = 和 - 都可以有效果。\nAtx 形式則是在行首插入 1 到 6 個 # ，對應到標題 1 到 6 階，例如：\n# This is an H1 ## This is an H2 ###### This is an H6  行首的井字數量決定標題的階數，行尾的#可不加\n連結 Markdown 支援兩種形式的連結語法： *行內*和*參考*兩種形式。\n[連結文字](連結目標)  絕對路徑 Google\n相對路徑 post\n連結到文章內的id example 或是空白隔著 2 example\nFooter\nThat\u0026rsquo;s some text with a footnote.1\nThat's the second paragraph.  圖片、其他、youtube 行內和參考\n![Alt text](/path/to/img.jpg) ![Alt text](/path/to/img.jpg \u0026#34;Optional title\u0026#34;) 參考式的圖片語法則長得像這樣：\n![Alt text][id] 「id」是圖片參考的名稱，圖片參考的定義方式則和連結參考一樣：\n[id]: url/to/image \u0026#34;Optional title attribute\u0026#34; Markdown Anchor markdown預設 H1,H2的 id就是 text\n\u0026lt;h1 id=\u0026#34;MyAnchorName\u0026#34;\u0026gt;My Title\u0026lt;/h1\u0026gt; 自定錨\n\u0026lt;a id=\u0026#34;MyAnchorName\u0026#34;\u0026gt;My Title\u0026lt;/a\u0026gt; 連結語法\n\u0026lt;a href=\u0026#34;#MyAnchorName\u0026#34;\u0026gt;My Content\u0026lt;/a\u0026gt;[create an anchor](#MyAnchorName) 要指定高度的話，也可以用 \u0026lt;img\u0026gt;\n程式碼 分兩個，行內，整段 行內像文中會提到的func name print() cast def()\n整段用 三個 ``` 包起，第一個後面放語言的名字\nfor i in 10: print(\u0026#34;heloo,world\u0026#34;) 如果要的syntax highlighting的話，要用hugo內的 shortcode\n1var a string\r2var b string\r3var c string\r4var d string 參考連結  Eng-doc markdown.tw Archetypes Customizing Emoji連結   And that\u0026rsquo;s the footnote.\r[return]  "
},
{
	"uri": "/tags/stephenking/",
	"title": "StephenKing",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/categories/life/",
	"title": "life",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/writing/",
	"title": "writing",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/minecraft-with-python/",
	"title": "Minecraft With Python",
	"tags": ["minecraft", "python", "game"],
	"description": "Playing MineCraft with Python",
	"content": "Getting Started with Minecraft Pi with Python\nTask list: 😄\n初稿 再讀 筆記 完成  概述 使用 Python 來控制 MineCraft 的動作。\n安裝  安裝 MineCraft $800 安裝 Python 目前是用 Anaconda 3.6 安裝raspberryjammod 為 rpi開發的mod，raspbian上預設安裝 使用 在遊戲中，用 /py some-file-of-python 就可以執行 python script  Docdock Alert **this** is a text **Yeahhh !** is a text **Be carefull** is a text **Beware !** is a text attachments 建 page 同名的 page.file 目錄，下面可以放檔案\nbutton  go to google  Success  Info  Warning  Danger !  Danger !  children 例出下屬的 children 頁面列表，可以作出卡片式的 列表。\nexcerpt Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n　excerpt-include 從檔案引用內容\nexpand 可收起隱藏內容\n  Is this docdock theme rocks ?   Yes !.   icon  Mermaid mermaid.initialize({startOnLoad:true}); graph LR;\rA[Hard edge] --|Link text| B(Round edge)\rB -- C{Decision}\rC --|One| D[Result one]\rC --|Two| E[Result two]\r Notice Note A notice disclaimer \nInfo An information disclaimer \nTip A tip disclaimer \nWarning An warning disclaimer \npanel 可以把一些內容加框\nLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. panel footer  revealjs reveal.js Slide\n語法 樣式可以用 星號* 或是 底線_\n斜體 emphasis, aka italics, with asterisks or underscores. 粗體 Strong emphasis, aka bold, with asterisks or underscores. 合併 Combined emphasis with asterisks and underscores. 刪除線 Strikethrough uses two tildes. Scratch this.\n孔子說：\n 說什麼\n  定義是： 是什麼\n  目錄 第一種是手工的目錄\n目錄  概述  語法 目錄  區塊元素  標題 連結 圖片、其他、youtube 程式碼 參考連結   內文地方加上 概述的連結\n第二種是 After-Dark 內建目錄，在 標頭上加上 toc: = true，程式會把大的標題生成目錄\n區塊元素 ** List **\n AAA  BBB  CCC   what some soso  標題 Setext 形式是用底線的形式，利用 = （最高階標題）和 - （第二階標題），例如：\nThis is an H1 ============= This is an H2 -------------  任何數量的 = 和 - 都可以有效果。\nAtx 形式則是在行首插入 1 到 6 個 # ，對應到標題 1 到 6 階，例如：\n# This is an H1 ## This is an H2 ###### This is an H6  行首的井字數量決定標題的階數，行尾的#可不加\n連結 Markdown 支援兩種形式的連結語法： *行內*和*參考*兩種形式。\n[連結文字](連結目標)  絕對路徑 Google\n相對路徑 post\n連結到文章內的id example 或是空白隔著 2 example\nFooter\nThat\u0026rsquo;s some text with a footnote.1\nThat's the second paragraph.  圖片、其他、youtube 行內和參考\n![Alt text](/path/to/img.jpg) ![Alt text](/path/to/img.jpg \u0026#34;Optional title\u0026#34;) 參考式的圖片語法則長得像這樣：\n![Alt text][id] 「id」是圖片參考的名稱，圖片參考的定義方式則和連結參考一樣：\n[id]: url/to/image \u0026#34;Optional title attribute\u0026#34; Markdown Anchor markdown預設 H1,H2的 id就是 text\n\u0026lt;h1 id=\u0026#34;MyAnchorName\u0026#34;\u0026gt;My Title\u0026lt;/h1\u0026gt; 自定錨\n\u0026lt;a id=\u0026#34;MyAnchorName\u0026#34;\u0026gt;My Title\u0026lt;/a\u0026gt; 連結語法\n\u0026lt;a href=\u0026#34;#MyAnchorName\u0026#34;\u0026gt;My Content\u0026lt;/a\u0026gt;[create an anchor](#MyAnchorName) 要指定高度的話，也可以用 \u0026lt;img\u0026gt;\n程式碼 分兩個，行內，整段 行內像文中會提到的func name print() cast def()\n整段用 三個 ``` 包起，第一個後面放語言的名字\nfor i in 10: print(\u0026#34;heloo,world\u0026#34;) 如果要的syntax highlighting的話，要用hugo內的 shortcode\n1var a string\r2var b string\r3var c string\r4var d string 參考連結  PYTHON CODING FOR MINECRAFT Getting Started with Minecraft Pi https://github.com/arpruss/raspberryjammod https://www.stuffaboutcode.com/p/minecraft-api-reference.html   And that\u0026rsquo;s the footnote.\r[return]  "
},
{
	"uri": "/tags/game/",
	"title": "game",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/minecraft/",
	"title": "minecraft",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/vim-plugins-markdown/",
	"title": "Vim Plugins Markdown",
	"tags": ["vim", "plugins", "markdown"],
	"description": "Add some plugins for Markdown editing",
	"content": "加一些幫助 Markdown 編輯的 plugins.\nTask list: 😄\n初稿 再讀 筆記 完成  概述 Plugins 用 VimPlug ，有 lazyLoad ，裝多一些 plugin ，應該比較不會 lag\nvim-markdown vim-markdown\nSyntax highlighting, matching rules and mappings for the original Markdown and extensions.\n主要功能是 語法高亮，標題間快快速移動功能鍵，Toc，打開檔頭 toml 的語法標示\n其他功能看原始文件的 github.\n文件預覽的話，可能就直接用 Hugo server -D\n快速鍵\n gx: open in browser\n ge: open in editor\n ]]: go to next header. \u0026lt;Plug\u0026gt;Markdown_MoveToNextHeader\n [[: go to previous header. Contrast with ]c. \u0026lt;Plug\u0026gt;Markdown_MoveToPreviousHeader\n ][: go to next sibling header if any. \u0026lt;Plug\u0026gt;Markdown_MoveToNextSiblingHeader\n []: go to previous sibling header if any. \u0026lt;Plug\u0026gt;Markdown_MoveToPreviousSiblingHeader\n ]c: go to Current header. \u0026lt;Plug\u0026gt;Markdown_MoveToCurHeader\n ]u: go to parent header (Up). \u0026lt;Plug\u0026gt;Markdown_MoveToParentHeader\n Toc, Toch,Tocv, Toct TableofContent\n  參考連結  絕世好 Vim：舒爽地編輯 Markdown 文件 Yet another vimrc http://kaochenlong.com A Vim input method engine "
},
{
	"uri": "/tags/markdown/",
	"title": "markdown",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/plugins/",
	"title": "plugins",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/vim/",
	"title": "vim",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/learning-google-spreadsheet-functions/",
	"title": "Learning Google Spreadsheet Functions",
	"tags": ["google", "spreadsheet", "office"],
	"description": "Using Google SpreadSheet Functions",
	"content": "使用 IMPORTXML 讀 HTML 的資料進 Google 試算表。\n以下節錄 Google 試算表使用說明，或許改天再加一些使用記錄。\nTask list: 😄\n初稿 再讀 筆記 完成  使用函數 在儲存格中輸入等號 (=) 及您要使用的函式\n注意：系統可能會根據您的資料提供建議的公式和範圍。 IMPORTXML 用法範例\nIMPORTXML(\u0026quot;https://en.wikipedia.org/wiki/Moon_landing\u0026quot;, \u0026quot;//a/@href\u0026quot;) IMPORTXML(A2,B2)  語法\nIMPORTXML(網址, XPath_查詢)   網址 - 要檢查的網頁所在網址，包括通訊協定名稱 (例如 http://)。 :網址的值必須放置在引號內，或者是一個含有適當文字的儲存格參照。 :XPath 查詢 - 要對結構化資料執行的 XPath 查詢。  如要進一步瞭解 XPath，請造訪 http://www.w3schools.com/xml/xpath_intro.asp。\nXPath XPath 可以 用 Chrome -\u0026gt; 檢視網頁原始碼 -\u0026gt; Copy -\u0026gt; Copy XPath\n例子，要讀 Web Ptt 版的文章標題 ，\n原始的 XPath //*[@id=\u0026quot;main-container\u0026quot;]/div[2]/div[1]/div[3]/a\n要改成 //*/div[2]/div/div/a , 把 方括號去掉才能作用。\n=importXML(\u0026quot;https://www.ptt.cc/bbs/Baseball/index.html\u0026quot;,\u0026quot;//*/div[2]/div/div/a\u0026quot;)  REGEXEXTRACT 根據規則運算式擷取符合規則的子字串。\n用法示範\nREGEXEXTRACT(\u0026quot;Needle in a haystack\u0026quot;, \u0026quot;.e{2}dle\u0026quot;)  語法\nREGEXEXTRACT(text, regular_expression)   text - 輸入文字。 regular_expression - 此函式將傳回 text 中符合此運算式的第一個字串。  附註\nGoogle 產品使用 RE2 來處理規則運算式。Google 試算表支援 RE2，但不支援符合規則的 Unicode 字元類別。進一步瞭解如何使用 RE2 運算式 此函式僅接受輸入文字 (而非數字)，並傳回文字做為輸出結果。如果您希望系統傳回數字，請在使用此函式時一併使用 VALUE 函式。如果要以數字做為輸入值，請先使用 TEXT 函式將其轉換為文字。\n使用例子：\n=regexextract(A1,\u0026quot;\\[[^\\]]+\\]\u0026quot;)  後記 Google Spreadsheet 只能對 \u0026ldquo;靜態\u0026rdquo; 網頁，其他的網頁可能還是需要爬蟲程式\n參考連結  正規表示式 Regular Expression 無痛爬梳自己來，用 Google Spreadsheet 爬取網頁資料 Google 試算表函式清單 選擇表單回應資料的儲存位置 "
},
{
	"uri": "/tags/google/",
	"title": "google",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/office/",
	"title": "office",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/spreadsheet/",
	"title": "spreadsheet",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/collection-books-organized/",
	"title": "Collection Books Organized",
	"tags": ["collection", "book", "GTD"],
	"description": "書籍整理 online",
	"content": "為了避免再重複買到一樣的書，應該是要整理一下目前有的書。 另外其他也需要整理的有，game(Pc,PS4)\nTask list: 😄\n初稿 再讀 筆記 完成  概述 分類\n實體\n 書 PS4 game  數位\n 電子書(線上商店:books.tw,) 電子檔(pdf,epub) Game(steam,gog,ea-origin, HB\u0026hellip;) - google.doc GamerLibrary 購買記錄(博客來，steam, gog, HB, ea-origin)  使用 Google spreadsheet 記錄？ (其他小型資料庫？)\n利用 Google 問卷 試算表 當小型資料庫（一）製作資料庫\n前端 Google Form(Google 問卷) \u0026ndash;\u0026gt; 記錄到 Google Spreadsheet\n目前書目整理流程 是用 Readmoo.share app ，掃到書後，再行整理， 如果沒有書目資料，可能要到網頁自行建立書目。\n可能要到網頁自行建立書目\n參考連結  利用 Google 問卷 試算表 當小型資料庫（一）製作資料庫 "
},
{
	"uri": "/tags/gtd/",
	"title": "GTD",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/book/",
	"title": "book",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/collection/",
	"title": "collection",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/pycon-tw-2018-june-01-02-taipei-todolist/",
	"title": "PYCON TW 2018 June 01 02 Taipei Todolist",
	"tags": ["python", "pycon", "video"],
	"description": "PYCON TW 2018 todolist",
	"content": "今年的 PYCON TW 2018 ,Taipei June 01-02， 筆記一下有什麼有趣的主題。\n PYCON TW 2018 Youtube PyCon TW 2018 Talks Schedule  Task list: 😄\n初稿 再讀 筆記 完成  概述 有趣的主題 Day 1\nPython工業4.0 - 自造工廠監控系統 Smart Things Home Assistant: build your own smart home - Shuhsi Lin 土炮一個 Line 股票機器人 - Victor Gau, 沈弘哲 and Malo\nDay 2\n維基教我做的金頭腦：知識圖譜製作初體驗 - 張泰瑋 該怎麼樣（認真的）部署你的 Python Web 應用程式? - Andy Dai Python實作運彩下注策略 - 陳建安 and 廖子慶 往 MVC GUI 設計邁進 - tkouter - 支援 html-based layout 的 tkinter 擴充函式庫 - 袁克倫\n別人心得  PyCon 2018 – Conference Day 1 (May 11)  參考連結  PYCON TW 2018 PYCoN TW 2018 Facebook PYCON TW 2018 Youtube PYCON TW Hackmd共筆 "
},
{
	"uri": "/tags/pycon/",
	"title": "pycon",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/video/",
	"title": "video",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/_footer/",
	"title": "It&#39;s Footer",
	"tags": [],
	"description": "Description",
	"content": "hello Hello, This is footer.\n"
},
{
	"uri": "/",
	"title": "HomePage",
	"tags": ["blog", "hugo"],
	"description": "Homepage for content/",
	"content": "this page for placeholder.\n"
},
{
	"uri": "/tags/blog/",
	"title": "blog",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/hugo/",
	"title": "hugo",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/hugo-blog-new-theme-docdock/",
	"title": "Hugo Blog New Theme Docdock",
	"tags": ["blog", "hugo", "theme"],
	"description": "Change blog new theme docdock",
	"content": "Hugo 換新的 theme docdock , 會多 search, mermaid\nTask list: 😄\n初稿 再讀 筆記 完成  概述 docdock\n主要的功能\n Search Unlimited menu levels RevealJS presentation from markdown (embededed or fullscreen page) Attachments files List child pages Include segment of content from one page in another (Excerpt) Automatic next/prev buttons to navigate through menu entries Mermaid diagram Icons, Buttons, Alerts, Panels, Tip/Note/Info/Warning boxes Image resizing, shadow\u0026hellip; Customizable look and feel  安裝 基本上是用 submodule 安裝 theme，\n設定檔用範例的，修改一下。\n 改配色 original-blue sidebar 加入 tags, categories, 不過可能還要再修一下 search 正常運作 雙語？之後試 emoji ok  已有功能  [v] syntax highlight.js [v] emoji [v] mermaid flow chart [v] 直接連到 github 修改原始檔 [v] Pic logo + Unsplash Source Logo [v] search  缺少功能？  disqus 字數計算 相關內容, 文章 tag , categories 讀完時間 reading-time 改 dark theme  功能範例 highlight.js DEMO\nShortcode Alert **this** is a text **Yeahhh !** is a text **Be carefull** is a text **Beware !** is a text attachments 建 page 同名的 page.file 目錄，下面可以放檔案\nbutton  go to google  Success  Info  Warning  Danger !  Danger !  children 例出下屬的 children 頁面列表，可以作出卡片式的 列表。\nexcerpt Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n　excerpt-include 從檔案引用內容\nexpand 可收起隱藏內容\n  Is this docdock theme rocks ?   Yes !.   icon  Mermaid mermaid.initialize({startOnLoad:true}); graph LR;\rA[Hard edge] --|Link text| B(Round edge)\rB -- C{Decision}\rC --|One| D[Result one]\rC --|Two| E[Result two]\r Notice Note A notice disclaimer \nInfo An information disclaimer \nTip A tip disclaimer \nWarning An warning disclaimer \npanel 可以把一些內容加框\nLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. panel footer  revealjs reveal.js Slide\n參考連結  docdock hugo-theme-learn mermaid "
},
{
	"uri": "/tags/theme/",
	"title": "theme",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/my-workspace-configuration-2018-may/",
	"title": "My Workspace Configuration 2018 May",
	"tags": ["life", "log", "hardware"],
	"description": "Workspace Equipment Configuration",
	"content": "電腦設備、工作環境記錄 2018 May\nTask list: 😄\n初稿 再讀 筆記 完成  概述 硬體 Huwei  Desktop PC Z97  Mainboard: Asus Z97 ProGamer Mouse: Logitech G102 Keyboard: Ducky 9008 S2 Monitor: BENQ GW2760S Monitor: BENQ EW2740  Zenfone3 ZE552KL RaspberryPi x 2 Arduino Mega256 PS4 Pro 7100  DS4 x 2 DS4 new x 1  Padfone2(Broken) LG G2(Broken) HTC OneX(Partial Broken) PS4 1027 Printer: Brother MFC-L2740DW  連接配置\nmermaid.initialize({startOnLoad:true}); graph LR;\rZ97[PC:Z97] --|Video| B[GW2760]\rZ97[PC:Z97] --|Video| C[EW2740]\rPS4Pro[PS4Pro] --|Video| B[GW2760]\r 軟體 桌面軟體  Chrome JDownload 2.0 Line Cmder TotalCommander 9.12 PCMan 文字編輯器: GVim 8.0 編輯器: PyCharm,Visual Studio Code 影片編輯: gimp 影像編輯: Magix Vegas Pro Edit 14 Password Manager: Keepass VirtualBox  WinXP,Win10 Linux Mint,Ubuntu,ArchLinux,CentOS FreeBSD  Steam,BattleNet,GOG.com  網站工具  Chrome Addon  OneTab  Cloud Storage: Dropbox Social Site: Facebook, Twitter Forum: ptt,reddit, gamer.tw Calendar: Google Calendar Todolist : Wunderlist Note: EverNote RSS Reading: Feedly Personal Site: Github Page  Android 工具  Pitt Pocket Keepass Financisto Line TotalCommander AnkiDroid gReader Wunderlist tinyCamF Whoscall F-Droid  Blockada Tachiyomi   單項  照片: 手機-\u0026gt; 備份到 Google Photo 資料收集: Google Keep 初步整理: Evernote 長篇文章: Github Page  待讀文章\n 馬上讀: 之後找時間讀，短篇: Pocket 之後找時間讀，長篇: Pocket 參考資料: mark 到 ChromeBookmark  參考連結  Gasolin-Tooling2018 "
},
{
	"uri": "/tags/hardware/",
	"title": "hardware",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/life/",
	"title": "life",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/log/",
	"title": "log",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/pycon-usa-2018-may-09-17-cleveland-oh-todolist/",
	"title": "PYCON USA 2018 May 09-17 Cleveland OH TODO List",
	"tags": ["python", "pycon", "video"],
	"description": "PYCON.USA 2018 結束了，來看看有什麼有趣的東西",
	"content": "今年的 PYCON 2018 ,USA 在 May 09-17,Cleveland,OH 結束了。 筆記一下有什麼有趣的主題。\n PYCON 2018 的 Youtube 頻道 PyCon 2018 Tutorials Schedule PyCon 2018 Talks Schedule  Task list: 😄\n初稿 再讀 筆記 完成  概述 有趣的主題 Using Python to build an AI to play and win SNES StreetFighter II by Adam Fletcher, Jonathan Mortensen * 用 AI 打 SNES 快打2\n別人心得 Michael Driscoll\n PyCon 2018 – Conference Day 1 (May 11) PyCon 2018 – Conference Day 2 (May 12) PyCon 2018 – Conference Day 3 (May 13)  參考連結  PYCON 2018 PYCON 2018 Youtube "
},
{
	"uri": "/tags/humble-bundle/",
	"title": "Humble Bundle",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/software-humble-bundle-python-dev-kit/",
	"title": "Software Humble Bundle Python Dev Kit",
	"tags": ["software", "python", "Humble Bundle"],
	"description": "Humble Bundle Python Dev Kit",
	"content": "Humble Software Bundle: Python Dev Kit 買了這個，記錄一下。\nTask list: 😄\n初稿 再讀 筆記 完成  概述 Humble Software Bundle: Python Dev Kit\nPay $1 or More!\n Writer Pythonic Code Like a Seasoned Developer MSRP $39 PyCharm Professional Edition 2-Month Subscription New Users Only MSRP $35.60 Illustrated Guide to Learning Python 3 by Matt Harrison MSRP $19.97  Pay $15 or More!\n PyCharm Professional Edition 6-Month Subscription New Users Only MSRP $53.40 Python Jumpstart by Building 10 Apps MSRP $69 GitKraken PRO 1-Year License New Users Only MSRP $49 : Git GUI software Thoughtful Machine Learning with Python by Matthew Kirk MSRP $42.99  Pay Average (currently $16.01) or More!\n Mastering PyCharm MSRP $49 DigitalOcean $50 Credit New Users Only MSRP $50 : 提供虛擬專用伺服器 Python Tricks: A Buffet of Awesome Python Features by Dan Bader MSRP $29  Pay $20 or More!\n PyUP 1-Year Subscription New Users Only MSRP $599.88 : 管理 Python dependencies egghead.io 6-Month Subscription MSRP $240 : 線上課程 Fluent Python by Luciano Romalho MSRP $49.99 : 電子書 Postman PRO 6-Month Subscription Three Users MSRP $45 : 開發測試工具  參考連結  Humble Software Bundle: Python Dev Kit "
},
{
	"uri": "/tags/software/",
	"title": "software",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/tips-vim-copy-paste-and-clipboard/",
	"title": "Tips Vim Copy Paste and Clipboard",
	"tags": ["tips", "editor", "vim"],
	"description": "Tips of Vim using copy paste and clipboard",
	"content": "Vim 複製、貼上，及使用系統的剪貼簿。\nTask list: 😄\n初稿 再讀 筆記 完成  概述 Vim 複製、貼上，及使用系統的剪貼簿。\n混用 在 ~/.vimrc 加上\nset clipboard=unnamed# set mouse=a# 讓mouse一選，就直接是選取模式了 Vim 內的剪貼即會依系統剪貼簿內容變更。\n分開使用 一般的 Vim 指令\n yy : 是複製整行 dd : 是剪下整行  使用系統剪貼簿，要加前置 \u0026quot;+\n \u0026quot;+yy : 複製整行進系統剪貼簿 \u0026quot;+dd : 剪下整行進系統剪貼簿 \u0026quot;+gP : 貼上系統剪貼簿內容後，把遊標放在最後  See Also - Explain \u0026ldquo;+gP command from gvim menu\n參考連結  讓 vim 的複製貼上和其它 terminal 以及 Windows 共用 clipboard 讓 Vim 跟與你的系統剪貼簿 (clipboard) 共舞 Vim Tips Wikia: Accessing the system clipboard vim-基本操作 「筆記」vim/gvim 共用 X-Window 剪貼簿 "
},
{
	"uri": "/tags/editor/",
	"title": "editor",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/tips/",
	"title": "tips",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/reading-7habits-for-effective-text-editing-2.0/",
	"title": "Reading 7 Habits for Effective Text Editing 2.0",
	"tags": ["reading", "video", "vim"],
	"description": "Note for Video 7 Habits For Effective Text Editing 2.0",
	"content": "7 Habits For Effective Text Editing 2.0 - YouTube\nby Bram Moolenaar , Vim的作者談有效率的編輯 , Slide Here\nTask list: 😄\n初稿 再讀 筆記 完成  概述 7 個增進文字處理效率的好習慣\nSlides The problem  好的文字編輯器，可以幫助你有效率的處理日常事務。  The Tool  好的工具是你能熟練使用的程式，能發揮它 100% 的功用比什麼都重要。 Don\u0026rsquo;t try to learn everything , just learn what you need.  三個基本步驟 發現問題之後，精進的頻驟可以是：\n Find inefficiency 找到沒效率的地方 Find a quicker way 研究快捷的方法 Make it a habbit 養成習慣  See Also\n “The 7 habits of highly effective people” - Stephen R. Covey  Habit 1: Moving around quickly search\n 設定 set hlsearch : 找到的關鍵字高亮度 * : 直接找遊標上的字 設定 Folding 可以把用不到的資訊先隱藏起來  Habit 2: Don\u0026rsquo;t type it twice auto complete:\n Ctrl-N,Ctrl-P : 可以快速完成有輸入過的字 omni-colpletion : complete from language references  Habit 3: Fix it when it\u0026rsquo;s wrong 自動修正，spell correction:\n 打開拼字檢查 iabbrev teh the: 可以把容易打錯的，設為自動修正  Habit 4: A file seldom comes alone 使用 ctags 之類的軟體，查語言的manual\n quickfix window gf Goto file [I to search keyword in include files  Habit 5: Let\u0026rsquo;s work together 整合功能程式? email, office , pdf document\nHabit 6: Text is structured 寫簡單的程式，整理有規則的文件，如： log\nHabit 7: Sharpen the saw  時常整理你常用到的指令 Learn from what you did 從作中學 其他內容：  folding automatic indenting Plugins (generic and filetype specific) edit files over a network advanced scripting    Summary Step 1: Detect inefficiency - Find out what you waste time on Step 2: Find a quicker way - read the on-line help - read the quick reference, books, etc. - ask friends and colleagues - search the internet - do it yourself Step 3: Make it a habit - do it - keep on improving\nAnd  不要只用最基本的功能，也不需要細讀使用手冊， 能在日常的使用中，熟悉編輯器的功能最好。 Don\u0026rsquo;t try to learn everything , just learn what you need.  Q and A pass\n參考連結  7 Habits For Effective Text Editing 2.0 - YouTube "
},
{
	"uri": "/post/udemy-python-easily-migrate-excel-files-to-a-database/",
	"title": "Udemy Python Easily Migrate Excel Files to a Database",
	"tags": ["udemy", "python", "excel", "openpyxl"],
	"description": "用 openpyxl 來讀取 Excel 檔案 ",
	"content": "Python: Easily migrate Excel files to a database\n是個 約35 min的免費課程，花點時間來看看。\nTask list: 😄\n初稿 再讀 筆記 完成  概述 Python: Easily migrate Excel files to a database 使用 openpyxl 來讀寫 Excel2010/xlsx/xlsm 檔到資料庫，這邊是使用 SQLite 當例子\n另外在 Automate the Boring Stuff with Python 的 Ch12 也是使用了 openpyxl 來讀取 Excel 檔。\nIntroduction 簡單介紹了 Python 的安裝，和 PyCharm 的使用\nLearning the basics of openpyxl 2. Installing openpyxl 因為 PyCharm 各專案有不同的 Virtual Environment ，所以要另外安裝 package.\n 用 File -\u0026gt; Setting -\u0026gt; Project -\u0026gt; Project Interpreter 的頁面 新增 packages 或是打開 PyCharm 下的 ALT+F12 打開 Terminal ，用 pip install openpyxl 直接裝  3. (Optional) Virtualenv Virtualenv 可以建立一個獨立的環境，有獨立的 packages ，或是自已版本的 Interpreter， 可以避免干擾，有個乾淨的開發環境。\nPyCharm 的每個 Project 都有個別的 Virtualenv.\nSee Alos\n Virtual Environments (Python documentation)  4. Load an Excel document 使用範例檔： revenue.xlsx is Microsoft OOXML file\nrevenue.xlsx 是個簡單的 Excel 檔，三個欄位(column) ，Product,Price,Quantity sold 四筆資料(row)。共有兩個(Sheet)頁面，April , May\nfrom openpyxl import load_workbook wb = load_workbook(\u0026#39;revenue.xlsx\u0026#39;) wb.active wb.sheetnames ws = wb[\u0026#39;May\u0026#39;] 5. Reading data (single cell/row/column) \u0026gt;\u0026gt;\u0026gt; ws[\u0026#39;B4\u0026#39;] \u0026lt;Cell \u0026#39;May\u0026#39;.B3\u0026gt; \u0026gt;\u0026gt;\u0026gt; ws[\u0026#39;B4\u0026#39;].value 900 \u0026gt;\u0026gt;\u0026gt; ws.cell(row=3,column=2).value 900 \u0026gt;\u0026gt;\u0026gt; ws[\u0026#39;1\u0026#39;] (\u0026lt;Cell \u0026#39;May\u0026#39;.A1\u0026gt;,\u0026lt;Cell \u0026#39;May\u0026#39;.B1\u0026gt;,\u0026lt;Cell \u0026#39;May\u0026#39;.C1\u0026gt;) \u0026gt;\u0026gt;\u0026gt; ws[\u0026#39;C\u0026#39;] (\u0026lt;Cell \u0026#39;May\u0026#39;.C1\u0026gt;,\u0026lt;Cell \u0026#39;May\u0026#39;.C2\u0026gt;,\u0026lt;Cell \u0026#39;May\u0026#39;.C3\u0026gt;,\u0026lt;Cell \u0026#39;May\u0026#39;.C4\u0026gt;,\u0026lt;Cell \u0026#39;May\u0026#39;.C5\u0026gt;) 6. Iterating through rows  選取區塊：ws['A2:C5']  7. Writing to Excel sheets  建立新的頁面(Sheet): wb.create_sheet('June') 一次寫入一列資料： wb.append(['Laptop','900','25']) 寫入新資料後，用 wb.save('revenue.xlsx')  8. Formula\u0026rsquo;s in openpyxl Excel 內的方程式。如果沒有特別設定，有些儲存格的內容會是 =SUM(A1:C4) ，如果在讀檔時，加上 data_only=True ，就只會讀出最後運算的內容了。 ，或者說是在 Cache 內的內容。\nfrom openpyxl import load_workbook wb = load_workbook(\u0026#39;excel_files\\excel_fomulas.xlsx\u0026#39;,data_only= True) ws = wb.active print(ws[\u0026#39;C2\u0026#39;].value) Quiz 1: 讀取各儲存格， * 直接指定座標： ws['B3'] * 或是用cell，這邊的參數要用數字。ws.cell(row=3,column=2).value\nMigrating multiple excel sheets to a database 將資料從 Excel 轉移到 SQlite\nQuiz 1: Basics of openpyxl\n9. Reading from multiple excel documents 把所有檔案的資料印出來。\nrevenue_2016.xlsx revenue_2017.xlsx\n#test_multiple_files.py import os from openpyxl import load_workbook def parse_products(): big_list_of_all_rows = [] for file in os.listdir(\u0026#34;excel_files\u0026#34;): wb = load_workbook(os.path.join(\u0026#39;excel_files\u0026#39;,file)) for sheetname in wb.sheetnames: #print(\u0026#34;Current sheet is:\u0026#34;,sheetname) ws = wb[sheetname] for row in ws.iter_rows(min_row=2): single_row_values=[] for cell in row: single_row_values.append(cell.value) big_list_of_all_rows.append(single_row_values) return big_list_of_all_rows 10. Peewee and DBeaver 介紹 ORM 程式庫 peewee , 和讀取程式庫的程式 DBeaver 測試產生SQlite的檔案 revenue.db\n11. Store excel data in a database (sqlite) 將之前打開多檔的程式改寫一下，寫入 revenue.db\n#database.py from peewee import SqliteDatabase,Model,CharField,FloatField,IntegerField from test_multiple_files import parse_products db = SqliteDatabase(\u0026#39;revenue.db\u0026#39;) class Product(Model): name = CharField() price = FloatField() quantity_sold = IntegerField() class Meta: database = db db.connect() product_rows = parse_products() for product_row in product_rows: product = Product(name=product_row[0],price=product_row[1],quantity_sold=product_row[2]) product.save() db.close() 心得 用程式幫你讀 Excel 檔，寫入資料庫，能省下很多時間。\n參考連結  Object-relational mappers (ORMs) "
},
{
	"uri": "/tags/excel/",
	"title": "excel",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/openpyxl/",
	"title": "openpyxl",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/udemy/",
	"title": "udemy",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/vegas-pro/",
	"title": "Vegas Pro",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/video-editing/",
	"title": "Video Editing",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/software-intro-magix-vegas-pro-14-edit/",
	"title": "簡介 Magix Vegas Pro 14 Edit",
	"tags": ["software", "Vegas Pro", "Video Editing", "Humble Bundle"],
	"description": "Vegas Pro 14 Edit Humble Bundle",
	"content": " Vegas Pro是： VEGAS Pro 曾是索尼推出的一款非線性編輯軟體，現在由MAGIX開發及推出。最初由 Sonic Foundry開發，2003年至2016年間由索尼旗下子公司Sony Creative Software 負責開發維護工作。 維基百科\n  Task list: 😄\n初稿 再讀 筆記 完成  概述 Humble Software REBundle: VEGAS Pro: Discover Creative Freedom \n內容有以下軟體，主要的影音製作、編輯的軟體：\nUTA\n Soundpool: Stranger Synths\n Music Maker 80s Edition\n MAGIX Photo Manager Deluxe\n  BTA\n Xara Photo \u0026amp; Graphic Designer\n MAGIX Photostory Deluxe\n Music Maker Hip Hop Beat Producer\n  BT$20\n Xara Web Designer Premium\n MAGIX Vintage Effects Suite\n VEGAS Pro 14 Edit 非線性剪輯軟體 MAGIX Video Sound Cleaning Lab  不過比較有興趣的的目前有 Vegas Pro，很久以前有用過幾次。\n找個時間來試試。目前有官方的文件 可以參考。\n 目前最新的是 Vegas Pro 15 , 但 Vegas Pro 14 Edit 還不 算太舊 從 14 升級到 15 要 USD 299 (? Vegas Pro 比 Vegas Pro Edit 多了製作 BD/DVD 的功能，和其他特效 Vegas Pro 15 和 14 的差別在支援新顯卡的硬體加速，還有其他… Vegas Pro Edit 比 Vegas Pro 的不同 Vegas Pro 14 各版本官方比較 Vegas Pro 15 各版本官方比較 Vegas Pro 15 : New Feature  其他影音剪輯軟體 Wiki:視訊剪輯軟體列表\n專屬軟體(商業軟體)\n Adobe Premiere Pro HitFilm : 有免費試用的版本 Davinci Resolve : 有免費試用的版本 Final Cut Power Director(威力導演) Corel VideoStudio(會聲會影)  自由或開源軟體\n Avidemux VirtualDub Blender  教學資源 Sony Vegas 教學  Youtube\nSony Vegas Tutorial 基礎教學1-1 2012， Vegas Pro 9 - 12 ? How To Use Sony Vegas Pro 14 For Beginners! (2017) - LEARN VEGAS PRO IN 15 MINUTES!  單一影片，入門 【 Vegas pro标准版入门基础中文教程全集】SONY Vegas pro标准 Vegas Pro - Full Tutorial for Beginners 有英文字幕，8個影片，Vegas Pro 14 Sony Vegas Pro Tutorial 12 - 15 297 films 參考用  參考連結  Vegas Official Site Vegas China 有一些素材 "
},
{
	"uri": "/post/reading-automate-the-boring-stuff-with-python-1st/18_keyboard_mouse/",
	"title": "Chapter 18 以 GUI 自動化來控制鍵盤和滑鼠]",
	"tags": ["reading", "python", "automation", "automatestuff"],
	"description": "pyautogui 控制 keyboard, mouse",
	"content": " 沒有相應的程式庫時，可以模擬鍵盤、或滑鼠動作，直接操作 GUI 的得到相對的功能。  Task list: 😄\n初稿 再讀 筆記 完成  概述 UI Automation tools ratings\nGitHub (number of stars)(2018, April, 01)\n AutoHotkey (C++) - 1 652 pyautogui - 1 630 sikuli - 1 387 autopy - 856 TestStack.White (C#) - 797 pywinauto - 773  StackOverflow (number of tagged questions)\n AutoHotkey - 2663 (73.3% answered) AutoIt - 1627 (64.1% answered) sikuli - 673 (53.6% answered) pywinauto - 329 (61.4% answered) pyautogui - 231 (36.4% answered)   AutoHotkey: 是用自己的語法 Python: 有 pyautogui,pywinauto,autopy(python2，較舊)  PyAutoGUI vs PyWinAuto Python PyAutoGUI和Pywinauto区别及安装\n \u0026rdquo; 首先，这两者最大共同点就是可以操作计算机，模拟人工输入和鼠标操作等等。不过这两者也有侧重点，PyAutoGUI侧重于鼠标，键盘，截图，消息框的功能，Pywinauto侧重对CS的操作，虽然都有键盘，鼠标等模拟输入，不过最核心还是软件上的操作比较多。可以说各有所长。\u0026rdquo;\n  程式送出的鍵盤、滑鼠信號很快，不像手動的速度，所以記得留下檢查點 藉由登出來關閉所有程式，或 kill -9 ?  暫停與失效安全保護\n pyautogui.PAUSE = 1.5 暫停 1.5 秒 把游標移出畫面， 會觸發 pyautogui 的異常，會暫停程式 關掉失效保護功能：pyautogui.FAILSAFE = False  PyAutoGUI 文件 PyAutoGUI Docs\n官方文件的大綱：\n 安裝、基本操作 滑鼠游標 鍵盤 訊息方塊 截圖  控制滑鼠移動  畫面左上為原點 (0,0) ，向右 X 軸 正，向下 Y 軸 正  0,0 X increases --\u0026gt; +---------------------------+ | | Y increases | | | | 1920 x 1080 screen | | | | V | | | | +---------------------------+ 1919, 1079  \u0026gt;\u0026gt;\u0026gt; import pyautogui \u0026gt;\u0026gt;\u0026gt; pyautogui.size() (1920, 1080) \u0026gt;\u0026gt;\u0026gt; width, height = pyautogui.size() 取得滑鼠位置\n\u0026gt;\u0026gt;\u0026gt; pyautogui.postion() (311,32) # 傳回目前游標座標 移動滑鼠游標\npyautogui.moveTo(xpos,ypos,duration=xxsec): duration是每次移動幾秒，直到到達目的座標\n pyautogui.moveRel(xdis,ydis,duration=xxsec) 相對座標移動  程式：目前的游標位置 import pyautogui print(\u0026#39;Press Ctrl-C to quit\u0026#39;) try: while True: x,y = pyautogui.position() positionStr = \u0026#39;X: \u0026#39; + str(x).rjust(4) + \u0026#39; Y: \u0026#39; + str(y).rjust(4) # str.rjust() 字串向右對齊 print(positionStr,end=\u0026#39;\u0026#39;) print(\u0026#39;\\b\u0026#39;*len(positionStr), end=\u0026#39;\u0026#39;, flush=True) # 字串印出後，用等長的 Backspace 刪除，並 flush except KeyboardInterrupt: print(\u0026#39;\\nDone.\u0026#39;) 控制滑鼠游標的互動 Click\n Click : mosueDown, mouseUp  pyautogui.click(xpos,ypos,button=\u0026#39;left\u0026#39;) # right,middle,left pyautogui.click(xpos,ypos) pyautogui.mouseUp() pyautogui.mouseDown() pyautogui.doubleClick() pyautogui.rightClick() pyautogui.middleClick() Drag and Drop\n Drag : mouseDown()(一般是左鍵) -\u0026gt; 移動游標 Drop : (在 Drag狀態下)移動游標 -\u0026gt; mouseUp() pyautogui.dragTo(xpos,ypos) : 絕對座標 pyautogui.dragRel(xpos,ypos): 相對座標  # spiralDraw.py import pyautogui, time time.sleep(5) # 給緩衝時間 pyautogui.click() # get focus distance = 200 while distance \u0026gt; 0: pyautogui.dragRel(distance, 0, duration = 0.2) # move right distance = distance -5 pyautogui.dragRel(0,distance, duration = 0.2) # move down pyautogui.dragRel(-distance,0, duration = 0.2) # move left distance = distance -5 pyautogui.dragRel(0, -distance, duration = 0.2) # move up 滑鼠游標的捲動  pyautogui.scroll(xdistance): 傳入整數引數，向上(正數)、或向下(負數)捲動，這個單位在不同作業系統可能會不同，可能要先試看看。  \u0026gt;\u0026gt;\u0026gt; pyautogui.scroll(10) # scroll up 10 \u0026#34;clicks\u0026#34; \u0026gt;\u0026gt;\u0026gt; pyautogui.scroll(-10) # scroll down 10 \u0026#34;clicks\u0026#34; \u0026gt;\u0026gt;\u0026gt; pyautogui.scroll(10, x=100, y=100) # 游標先移到 x, y 後，再移動 10 \u0026#34;步\u0026#34;# pyperclip.py import pyperclip # 傳資料到剪貼簿的工具 numbers = \u0026#39;\u0026#39; for i in range(200): numbers = numbers + str(i) + \u0026#39;\\n\u0026#39; pyperclip.copy(numbers) # 開個 notepad ，把東西貼上去 import time, pyautogui time.sleep(5); pyautogui.scroll(100) 螢幕操作的函式  根據螢幕截圖的內容，分析後，再進行動作 需要 Pillow (Linux中需要 scrot 來截圖)  截圖\n\u0026gt;\u0026gt;\u0026gt; import pyautogui \u0026gt;\u0026gt;\u0026gt; im = pyautogui.screenshot() # im 就是 Pillow 的 Image 物件 \u0026gt;\u0026gt;\u0026gt; im.getpixel((0,0)) # 傳回值是座標的 (R, G, B) (176,176,175) \u0026gt;\u0026gt;\u0026gt; im.getpixel((50,200)) (130,135,144) 分析截圖\n 之前程式在執行前，先 click() 取得 focus 前，可以先確定座標位置的顏色和預想的一樣，再執行。  pyautogui.pixelMatchsColor(xpos,ypos,(R,G,B))\n程式：擴充 mouseNow 的功能 pass\n影像圖片的識別  pyautogui.locateOnScreen(path2pic)找出小圖的位置在目前螢幕的某個位置 傳回值是 左上的座標 (xpos,ypos，寬，高)  控制鍵盤 傳送一個字串 pyautogui.typewrite('string')\n鍵盤按鍵名稱  一般字元 a-z,A-Z, 符號 … 控制字元，BACKSPACE, ENTER, DELETE\u0026hellip; 功能鍵，F1-F12，Ctrl,Alt,Shift,winleft,command,option  SEE ALSO\n KEYBOARD_KEYS  按下，釋放按鍵  pyautogui.keyUp('shift'),pyautogui.keyDown('ctrl') pyautogui.press('a') = keyDown + keyUp  快速鍵組合  pyautogui.hotkey('ctrl','alt','shift','s') 可以同時按下多鍵  整理 PyAutoGUI 的函式  moveTo(x, y). Moves the mouse cursor to the given x and y coordinates. moveRel(xOffset, yOffset). Moves the mouse cursor relative to its current position. dragTo(x, y). Moves the mouse cursor while the left button is held down. dragRel(xOffset, yOffset). Moves the mouse cursor relative to its current position while the left button is held down. click(x, y, button). Simulates a click (left button by default). rightClick(). Simulates a right-button click. middleClick(). Simulates a middle-button click. doubleClick(). Simulates a double left-button click. mouseDown(x, y, button). Simulates pressing down the given button at the position x, y. mouseUp(x, y, button). Simulates releasing the given button at the position x, y. scroll(units). Simulates the scroll wheel. A positive argument scrolls up; a negative argument scrolls down. typewrite(message). Types the characters in the given message string. typewrite([key1, key2, key3]). Types the given keyboard key strings. press(key). Presses the given keyboard key string. keyDown(key). Simulates pressing down the given keyboard key. keyUp(key). Simulates releasing the given keyboard key. hotkey([key1, key2, key3]). Simulates pressing the given keyboard key strings down in order and then releasing them in reverse order. screenshot(). Returns a screenshot as an Image object. (See Chapter 17 for information on Image objects.)  程式：自動填寫表單  簡列需要的動作 詳列一下細步的動作，可用虛擬碼寫作 實作  總結  自動化可以節省不少時間，但是錯誤處理也很重要，可以確定程式走在正確的路徑上。  習題  Q: 1. How can you trigger PyAutoGUI’s fail safe to stop a program? A: 把游標移出邊界。 pyautogui.FAILSAFE = True, 打開安全防護功能。 滑鼠在移出畫面邊界時，會自動停止，會觸發 pyautogui.FailSageExcetion Q: 2. What function returns the current resolution()? A: pyautogui.size() 傳回 寬、高 Q: 3. What function returns the coordinates for the mouse cursor’s current position? A: pyautogui.position() ，x,y 座標 Q: 4. What is the difference between pyautogui.moveTo() and pyautogui.moveRel()? A: 絕對座標，相對移動 Q: 5. What functions can be used to drag the mouse? A: pyautogui.dragTo(), pyautogui.dragRel() Q: 6. What function call will type out the characters of \u0026ldquo;Hello world!\u0026rdquo;? A: pyautogui.typewriter(\u0026quot;Hellow World!\u0026quot;) Q: 7. How can you do keypresses for special keys such as the keyboard’s left arrow key? A: pyautogui.press(left) Q: 8. How can you save the current contents of the screen to an image file named screenshot.png? A: im = pyaytogui.screenshot(screenshot.png) Q: 9. What code would set a two second pause after every PyAutoGUI function call? A: time.sleep(2) 錯，是用 pyautogui.PAUSE= 2  實作 Looking Busy 防閒罝動作：\nimport pyautogui import time time.sleep(5) print(\u0026#39;Press Ctrl-C to quit\u0026#39;) distance = 4 timespan = 1 try: while True: pyautogui.moveRel(distance,0, duration = timespan) time.sleep(5) pyautogui.moveRel(-distance,0, duration = timespan) except KeyboardInterrupt: print(\u0026#39;\\nDone.\u0026#39;) Instant Messenger Bot pass\nGame-Playing Bot Tutorial pass\n參考連結  Automate the Boring Stuff with Python 作者網站 PyAutoGUI Docs "
},
{
	"uri": "/tags/automatestuff/",
	"title": "automatestuff",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/automation/",
	"title": "automation",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/reading-automate-the-boring-stuff-with-python-1st/",
	"title": "Reading Automate the Boring Stuff With Python 1st Edition",
	"tags": ["reading", "python", "automation", "automatestuff"],
	"description": "Python 自動化的樂趣 心得",
	"content": "心得筆記\n Automate the Boring Stuff with Python Practical Programming for Total Beginners by Al Sweigart  Task list: 😄\n初稿 再讀 筆記 完成  資料  Automate the Boring Stuff with Python @NoStarch @Amazon @Udemy by Al Sweigart (Author) Paperback: 504 pages Publisher: No Starch Press; 1 edition (April 14, 2015) Language: English ISBN-10: 1593275994 ISBN-13: 978-1593275990 Product Dimensions: 7.1 x 1.1 x 9.2 inches   @碁峰 @博客來 作者： Al Sweigart\n 譯者： H\u0026amp;C 出版社：碁峰\n 出版日期：2016/12/29 語言：繁體中文 定價：500元 ISBN：9789864762729 規格：平裝 / 528頁 / 17 x 23 cm / 普通級 / 單色印刷 / 初版 出版地：台灣 本書分類：電腦資訊\u0026gt; 程式設計/APP開發\u0026gt; Python  簡介 PART 1 是 Python 的一些基本語法介紹， 先快速讀過，之後再來補。\nPART 2 是自動化實做的部分。提一下比較特別的章節\n Ch11 Web 爬蟲 Ch12 Excel 試算表 Ch13 PDF,Word Ch14 CSV,Json Ch15 時間，自動排程 Ch16 Email,簡訊 Ch17 影像處理 Ch18 GUI，控制鍵盤、滑鼠\n 把日常生活中一些常做、重複的工作，利用程式來幫助你完成，省下時間。\n  安裝 Python\n 在 Windows 或 Linux 下，可以考慮 Anaconda ，包含不少好用的工具： IPython, Jupyter Lab,Spyder,\u0026hellip;  尋找說明文件、求助\n Google，StockOverflow，Reddit, other 官方文件  正確的發問\n 提問的智慧: 能清楚的提出問題，也能讓想幫你的人，能正確的回答 環境，程式版本，錯誤訊息，直譯器給的訊息 用 GIST 之類的網站貼程式碼、錯誤訊息。 解釋你做過的努力，試過哪些方法了 錯誤在哪些改動後，才出現？ 重現錯誤時的步驟，或是它在特定操作下才出現？ 網路禮節   PART 1 Python 程式設計基礎\nchapter 01 Python 基礎 chapter 02 流程控制 chapter 03 函式 chapter 04 串列 chapter 05 字典與結構化資料 chapter 06 字串的操作 PART 2 自動化專題實作\nchapter 07 使用正規表示式進行模式比對 chapter 08 讀寫檔案 chapter 09 檔案的組織管理 chapter 10 除錯（Debugging） chapter 11 從 Web 擷取資訊 chapter 12 處理 Excel 試算表 chapter 13 處理 PDF 與 Word 文件 chapter 14 處理 CSV 檔和 JSON 資料 chapter 15 保持時間、工作排程和程式啟動 chapter 16 發送 Email 和文字簡訊 chapter 17 處理影像圖片 chapter 18 以 GUI 自動化來控制鍵盤和滑鼠 附錄 [appendix A 安裝第三方模組] [appendix B 執行程式] [appendix C 習題解答] #Additional Content\nDownload files used in the book List of CSS Selector Tutorials List of JSON APIs List of Programming Practice Sites List of Web Comics Schedulers for Windows, Mac, and Linux How to Do PyCon (or any tech conference) 參考連結  Automate the Boring Stuff with Python 作者網站 "
},
{
	"uri": "/post/15-minute-apps/",
	"title": "Reading 15 Minute Apps",
	"tags": ["reading", "python", "pyqt", "gui"],
	"description": "心得 15 Minute Apps | Common desktop apps in Python, using PyQt",
	"content": "\u0026rdquo; 15 Minute Apps | Common desktop apps in Python, using PyQt\u0026rdquo; 簡單筆記\nTask list: 😄\n初稿 再讀 筆記 完成  概述 作者用 python 的 PyQT 寫15個桌面程式範例\n範例在這： 15-minute-apps@github\nWeb Browser - \u0026ldquo;MooseAche\u0026rdquo;  Web Browser (untabbed) - \u0026ldquo;MooseAche\u0026rdquo; Web Browser (tabbed) - \u0026ldquo;Mozzarella Ashbadger\u0026rdquo; Minesweeper - \u0026ldquo;Moonsweeper\u0026rdquo; Notepad - \u0026ldquo;No2Pads\u0026rdquo; Calculator - \u0026ldquo;Calculon\u0026rdquo; (QtDesigner) Word Processor - \u0026ldquo;Megasolid Idiom\u0026rdquo; Webcam/Snapshot - \u0026ldquo;NSAViewer\u0026rdquo; Media Player - \u0026ldquo;Failamp\u0026rdquo; Post-it Notes - \u0026ldquo;Brown Note\u0026rdquo; (QtDesigner) Paint - \u0026ldquo;Piecasso\u0026rdquo; (QtDesigner) Unzip - \u0026ldquo;7Pez\u0026rdquo; (QtDesigner) Translator - \u0026ldquo;Translataarrr\u0026rdquo; (QtDesigner) Weather - \u0026ldquo;Raindar\u0026rdquo; (QtDesigner) Currency converter - \u0026ldquo;Doughnut\u0026rdquo; (PyQtGraph) Solitaire - \u0026ldquo;Ronery\u0026rdquo; (QGraphicsScene)  參考連結  15 Minute Apps|Common desktop apps in Python, using PyQt "
},
{
	"uri": "/tags/gui/",
	"title": "gui",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/pyqt/",
	"title": "pyqt",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/reading-making-perfect-bread/",
	"title": "Reading 完美麵包製作書",
	"tags": ["reading", "food", "bread", "cooking"],
	"description": "麵包烘焙圖解書",
	"content": "「成功VS.失敗，完美麵包製作書：配料、發酵、分割、滾圓、整形到烘烤，搞懂關鍵步驟，抓出失敗問題，解決製作疑惑！」 簡單筆記\nTask list: 😄\nch3 初稿 再讀 筆記 完成  資料 成功VS.失敗，完美麵包製作書：配料、發酵、分割、滾圓、整形到烘烤，搞懂關鍵步驟，抓出失敗問題，解決製作疑惑！\n 作者： 黃東慶, 徐志宏\n 出版社：和平國際\n 出版日期：2016/07/01 語言：繁體中文 定價：280元 ISBN：9789863710455 叢書系列：Easy Cook 規格：平裝 / 200頁 / 19 x 26 cm / 普通級 / 全彩印刷 / 初版 出版地：台灣 本書分類：飲食\u0026gt; 甜點/麵包\u0026gt; 麵包  簡介\n Ch1 材料 與 工具 Ch2 基礎知識 Ch3 麵包的基本作法、失敗與解決方法 Ch4 各種麵包作法  《Chapter 1》製作麵包必備的材料與工具 基本材料1─麵粉 Flour\n 麵粉依蛋白質的含量比例，分為高筋、中筋、低筋 自發粉：麵粉 + 發粉  基本材料2─酵母 Yeast\n 酵母能將澱粉、糖分解成二氧化碳，讓麵團膨脹 酵母最適溫度： 25 ~ 35  基本材料3─糖 Sugar\n 糖：幫助麵團發酵、使麵包變得柔軟、有光澤 糖通常用量為 4 ~ 8 % ，過量會使滲透壓變大  基本材料4─鹽 Salt\n 作用：增加筋度、抑制酵母  基本材料5─油脂 Fat\n 作用：使麵包鬆軟、滑潤 奶油：生乳中魯肪含量最高，分有鹽、無鹽 無水奶油：去除水份的奶油 發酵奶油：奶油中加入乳酸菌，適合乳糖過敏的人食用 白油：化學合成，風味像豬油，適合素食 豬油：風味香濃、耐高溫 酥油：化學奶油、素食奶油 液態油脂：一般的食用油、大豆沙拉油、蔬菜油\n 油要多少？最好是6~10%\n 加入油的時機？最好是在攪伴麵粉、揉好後才加入\n  基本材料6─牛奶 Milk\n 牛奶可以代替水使用 使用奶粉的話記得要拌勻  基本材料7─雞蛋、水 Egg,Water\n 雞蛋：一個雞蛋約蛋白30g，蛋黃20g，可使麵包變的柔軟 水：混合材料的溶劑  基本工具─烤箱、麵包機、刷子、溫度計、攪拌器、擀麵棍、烤模、刮板、磅秤、鋼盆、量杯、量匙、篩網、計時器\n 烤箱：常用的溫度170~200度 烤箱要先預熱 量匙：大匙15mm，小匙5mm，1/2小匙2.5mm，1/4小匙1.25mm 量杯：236mm\n《Chapter 2》START！麵包的基礎篇  基礎篇01麵包種類與特徵介紹\n 硬式(歐式)麵包：法式、德式、義式 軟式(甜)麵包：日式，美式，麵包輕軟  基礎篇02製作出好吃麵包的4大關鍵 基礎篇03增加麵包風味的2大絕招─餡料和醬料\n《Chapter 3》麵包基本程序的失敗問題與解決方法 ●基本程序1：備料\n 奶油最好是解凍、泥化狀態最佳 材料比例重要，不要隨便變動 麵包不一定需要過篩 沒加到酵母的麵團會失敗。  ●基本程序2：攪拌\n 要攪拌到麵團可以拉出薄膜 麵團過熱可以加冰塊  ●基本程序3：發酵\n發酵法：\n 直接法：當天作好的麵團放半小時後，再翻面放一小時 低溫發酵法：前一天作好的麵團，冰18小時，取出使用 中種法：麵團前加入1/2前一天發酵好的麵團 湯種法：麵粉加沸水，置涼放入冰箱，用麵水加入新麵團  Q：麵團發不起來？ A：溫度26度？材料比例？\nQ：麵團是否發酵完成？ A：往麵團裡戳洞，不會馬上密合\n●基本程序4：分割\n●基本程序5：滾圓\n 滾圓： 使麵團能更好的二次發酵、及整形  ●基本程序6：整形\n 整形決定了麵包烤好後的樣子。  ●基本程序7：烘烤\n《Chapter 4》這樣做不NG！超完美麵包製作 日式白吐司  【變化款】全麥吐司 【變化款】咖啡核果吐司 【變化款】紅豆杏仁捲吐司 不失敗的問題與解答Q\u0026amp;A Q2為什麼烤不出表皮呈金黃色的吐司？\n Q3為什麼吐司皮上層塌陷變皺？ Q4吐司烤好後內部有氣洞？ Q5為什麼烤出來的吐司皮又硬又厚？ Q6為什麼烤出來的吐司堅果掉了一堆？  原味菠蘿 【變化款】巧克力菠蘿 【變化款】奶酥菠蘿 不失敗的問題與解答Q\u0026amp;A Q1為什麼烤出來的菠蘿皮沒有裂紋？ Q2為什麼奶酥餡太軟？ Q3為什麼菠蘿麵包吃起來不夠鬆軟？ Q4為什麼加入可可粉都拌不均勻？\n原味貝果  【變化款】抹茶紅豆 【變化款】芝麻貝果 【變化款】伯爵紅茶貝果 不失敗的問題與解答Q\u0026amp;A Q1 為什麼烤出來的貝果表面都皺皺的？ Q2 烤出來的貝果為什麼硬得像石頭？ Q3 貝果為什麼吃起來沒嚼勁？ Q4 烤完後的貝果為什麼銜接處會散開？  法式長棍麵包  【變化款】麥穗麵包 【變化款】法式短棍麵包 不失敗的問題與解答Q\u0026amp;A Q1為什麼做出來的法式麵包是鬆軟的不是酥脆的？ Q2如果家裡沒有蒸氣怎麼辦？ Q3為什麼烤出來的法棍切面氣孔很少？ Q4為什麼烤出來的法棍切面氣孔很大？  布里歐  【變化款】香橙布里歐 【變化款】霜降奶油布里歐 【變化款】起士海鮮布里歐 不失敗的問題與解答Q\u0026amp;A Q1為什麼布里歐麵團無法成團？ Q2為什麼布里歐很難整形？ Q3為什麼烤好後的布里歐容易縮腰？ Q4 為什麼有時烤起來焦脆，有時卻柔軟？  聖誕麵包  【變化款】潘娜多妮 【變化款】史多倫麵包 不失敗的問題與解答Q\u0026amp;A Q1為什麼潘娜多妮沒發酵成功？ Q2為什麼潘娜多妮烤不太上色？ Q3為什麼潘娜多妮麵團無法成團？ Q4為什麼聖誕麵包需加大量酒漬果乾？  義大利拖鞋麵包  【變化款】義式洋蔥拖鞋麵包 【變化款】羅勒拖鞋麵包 【變化款】番茄黑橄欖佛卡夏 不失敗的問題與解答Q\u0026amp;A Q1為什麼佛卡夏烤不上色？ Q2為什麼佛卡夏麵團無法發酵很大？ Q3為什麼烤出來的麵包沒有口感？  羅宋麵包  【變化款】香蒜羅宋麵包 【變化款】南瓜羅宋麵包 不失敗的問題與解答Q\u0026amp;A Q1為什麼烤出來的羅宋麵包口感硬梆梆？ Q2為什麼羅宋麵包都會烤過頭？ Q3為什麼羅宋麵包發酵後變很大？為什麼羅宋麵包不太會發酵？  德國鄉村裸麥麵包  【變化款】裸麥芝麻麵包 【變化款】裸麥莓果麵包 不失敗的問題與解答Q\u0026amp;A Q1為什麼裸麥麵包太乾無口感？ Q2為什麼裸麥三邊都會鼓起來不平，厚度不均勻？ Q3為什麼我做起來的裸麥麵包內部組織太密？沒氣孔？ Q4為什麼烤好的裸麥麵包底部會裂開？  英國司康  【變化款】蔥花起司培根司康 【變化款】蔓越莓司康 【變化款】迷迭香司康 不失敗的問題與解答Q\u0026amp;A Q1為什麼司康不發，且烘烤後不高？ Q2為什麼做好的司康口感不夠鬆軟？ Q3為什麼司康加入果乾後無法長很高？ Q4如何讓烘烤後的司康完美上色？  ##辮子麵包\n 【變化款】克寧姆辮子麵包 【變化款】蔥花辮子麵包 不失敗的問題與解答Q\u0026amp;A Q1麵團整形到一半辮子就斷了？ Q2麵包烤好了，可是辮子變形了？ Q3為什麼烤好的克寧姆餡料都溢在烤盤上了？ Q4為什麼烤完後蔥花都焦黑了？  毛毛蟲麵包  【變化款】抹茶紅豆毛毛蟲麵包 【變化款】熱狗毛毛蟲麵包 不失敗的問題與解答Q\u0026amp;A Q1為什麼毛毛蟲麵包都烤不上色？ Q2為什麼烤好的抹茶紅豆毛毛蟲麵包，裡面的紅豆會掉出來？ Q3為什麼做出來的熱狗毛毛蟲麵包都會頭尾大小比例落差很大？ Q4為什麼麵團都無法包覆熱狗？  參考連結   "
},
{
	"uri": "/tags/bread/",
	"title": "bread",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/cooking/",
	"title": "cooking",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/food/",
	"title": "food",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/python-import-system/",
	"title": "Python Import System",
	"tags": ["python", "module"],
	"description": "Note for Python Import System",
	"content": "How python\u0026rsquo;s import machinery works 簡單的筆記， 順便整理一下 import 的資料。\n概述 import 就像 C的 include \u0026hellip;用來引用其他的程式庫。 並簡單說明引用的機制、優先順序。\n名詞解釋  modules: A module is a file containing Python definitions and statements.\n modules 是有 python 程式碼的檔案, 是單一檔案，副檔名是 .py，檔案名就是 import name\n packages: a way of structuring Python’s module namespace by using “dotted module names”.\n packages 是 modules 的集合，import name 通常是 資料夾名。\n  範例檔案結構 假設有個 package 長這樣\ntmp/ my_package/ __init__.py my_module.py my_module.py\nclass MyClass: def __init__(self): print(\u0026#39;init called\u0026#39;) def caps(self, word): print(word.upper()) import 方法一 進 tmp後，執行 python\n$cd tmp $python 通常 import 的方式是這樣。 物件產生時，和物件方法執行時，會印出一些訊息。\n\u0026gt;\u0026gt;\u0026gt; from my_package import my_module \u0026gt;\u0026gt;\u0026gt; something = my_module.MyClass() init called \u0026gt;\u0026gt;\u0026gt; something.caps(\u0026#39;hello\u0026#39;) HELLO import 方法二：import_module 動態載入 先載入 import_module 後，再用它載入其他的 package\n\u0026gt;\u0026gt;\u0026gt; from importlib import import_module \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; my_module = import_module(\u0026#39;my_package.my_module\u0026#39;) \u0026gt;\u0026gt;\u0026gt; obj = my_module.MyClass() init called \u0026gt;\u0026gt;\u0026gt; obj.caps(\u0026#39;hello\u0026#39;) HELLO 手動載入 How to import a module given the full path?\nPython module 的載入機制 sys.modules 先找  sys.modules 是 python 執行時會先載入的 module，通常是系統內建的程式庫 如果你有把 import my_module , my_module 也會出現在 sys.modules 中。  sys.meta_path 次之 前面的 sys.modules 找不到後，會載入 sys.meta_path 物件，開始從 sys.path 裡去找你想載入的 packages。\n這邊比較需要記得就是 sys.path 是放要載入的程式庫的路徑， 所以把你的程式庫路徑加進 sys.path 應該就可以找到了。\n其他 整個 import 載入的機制，參考連結說的滿清楚的的， 太細節的部分，之後有空再來細看。\n參考連結  Python Docs: 5.The import system How python\u0026rsquo;s import machinery works import-pypi:import modules form pypi StockOverFlow:What\u0026rsquo;s the difference between a Python module and a Python package? "
},
{
	"uri": "/tags/module/",
	"title": "module",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/python-debugging-with-pdb/",
	"title": "Python Debugging With Pdb",
	"tags": ["python", "module", "debug"],
	"description": "pdb 函式庫 使用",
	"content": "Python Debugging With Pdb 簡單心得\n概述 pdb 是 pytyon 內建提供類似 gdb 功能， 用來除錯的程式庫。\n大概有兩種用法：\n 直接使用： python3 -m pdb myscript.py 在程式內設置中斷點：import pdb; pdb.set_trace()  看完文章，你需要學會除錯的動作有：\n 一步一步執行程式，或是 執行到某個地方停止，重新開始執行程式 監視某個變數的值。  直接使用 pdb python 執行程式時，執行 pdb 模組\n$python -m pdb myscript.py 這樣就會進入互動式除錯模式。按 h(elp) 看說明： Debugger Commands\n(Pdb) h Documented commands (type help \u0026lt;topic\u0026gt;): ======================================== EOF c d h list q rv undisplay a cl debug help ll quit s unt alias clear disable ignore longlist r source until args commands display interact n restart step up b condition down j next return tbreak w break cont enable jump p retval u whatis bt continue exit l pp run unalias where Miscellaneous help topics: ========================== exec pdb  一些常用指令：\n h(elp) [command]: 看指令說明 b 數字 - 設置中斷點 r - 繼續執行，直到當前函式返回 c - 繼續執行程式 n - 執行下一行程式 s - 進入函式 p 變數名稱 - 印出變數 pp - Pretty-print l - 列出目前的程式片段 q - 離開  在程式內設置中斷點 在程式碼內載內 pdb\nimport pdb; pdb.set_trace() 執行程式後，就會互動除錯模式。\nPython 3.7, PEP 553 加入一個比較簡單的除錯內建函式 breakpoint()\n指令說明 顯示  l(ist) [first[, last]]：顯示目前執行的到程式碼，沒加參數的話，就是印出單行 ll long list: 印出多行程式碼，並指出目前執行的到行數 p expression：印出變數 pp expression：印出變數， pretty-printed whatis expression：印出變數的型態，int or string \u0026hellip; a(rgs) ：列出目前函數的所有參數  程式流程  n (next)：執行程式下一行 s (step)：步進程式 c(ont(inue))：執行到下一個中斷點停止  監視變數  display [expression]：監視變數，變數有變動時，就會顯示。 undisplay [expression]：停止監視變數  中斷點  b(reak) [([filename:]lineno | function) [, condition]]：設罝中斷點， b 不加參數，會列出所有中斷點。 tbreak [([filename:]lineno | function) [, condition]]：暫時中斷點，執行後，就會被移除。 cl(ear) [filename:lineno | bpnumber [bpnumber ...]]清除中斷點 disable [bpnumber [bpnumber ...]]：停用中斷點 enable [bpnumber [bpnumber ...]]：啟用中斷點  Python Caller ID pass\n結語 pdb 是個很好用的工具，熟練使用的話，能輕易找出程式問題。\n參考連結  Python Debugging With Pdb Python初學起步走-Day30 - 除錯(使用pdb) Python3 Docs:pdb "
},
{
	"uri": "/tags/debug/",
	"title": "debug",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/tool-picon-python-interactive/",
	"title": "Picon: 在互動的環境下執行 Python 程式碼",
	"tags": ["commandline", "python", "vim"],
	"description": "Run your code in python interactive console from the command line",
	"content": "可以在即時在編輯器看到程式碼執行的結果。\n概述 picon 實際上的用法，看作者的圖可能比較清楚。\n安裝 $pip install picon 用法 picon 的用法大概有三種：\n Default: picon example.py 讀進 exampley.py 的內容，以互動模式輸出， 有點像直接把 example.py 的內容貼到 ipython Live or -l: picon example.py -l 同預設模式，不過更像是 ipython 的輸出 Append mode or -a: picon example -a\n輸出的行開頭多了 #| ，這個模式下的輸出， 可以直接被編輯器讀取。  語法 python 互動命令列的語法跟正常的 python 語法有點不同。 在互動模式下，變數不用加 print ，會直接印出。\n$ cat return.py x = 42 x print x $ python return.py 42 $ picon return.py 42 42 第二，區塊。在 python 中，有同樣縮排的，就算中間多了一個空行， 還是視為同一階層。但是在 picon ，中間隔了空行，就視為新的區 塊。\n$ cat block.py if True: print \u0026#39;one\u0026#39; print \u0026#39;two\u0026#39; $ python block.py one two $ picon block.py one File \u0026#34;\u0026lt;console\u0026gt;\u0026#34;, line 1 print \u0026#39;two\u0026#39; ^ IndentationError: unexpected indent Vim 整合 :%!picon -a： Vim打開程式碼後，在命令模式下執行 :%!picon -a ， 即可看到執行的結果以註解出現在下一行。\nPicon 指令： 保留游標的位置 和 把 picon 所作的變動合到一個 undo 的步驟中。 之後，只要執行 Picon 即可。\ncommand! Picon exe 'normal m`' | silent! undojoin | exe '%!picon -a' | exe 'normal ``'  還可以在這寫入buffer, 發呆，兩個事件時，自動執行 Picon ，詳細的指令，可以查 :help updatetime\nautocmd Filetype python autocmd BufWritePre \u0026lt;buffer\u0026gt; Picon autocmd Filetype python autocmd CursorHold \u0026lt;buffer\u0026gt; Picon  參考連結  Picon  "
},
{
	"uri": "/tags/commandline/",
	"title": "commandline",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/tool-commandline-autojump/",
	"title": "Tool Commandline Autojump",
	"tags": ["commandline", "unix"],
	"description": "navigate directories tool autojump.",
	"content": "autojump 能快速的切換資料夾。\n簡述 # 一個很長的目錄 cd \\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k # 之後要再去同一個目錄 j k  安裝設定 REQUIREMENTS\n Python v2.6+ except v3.2 Supported shells:  bash v4.0+ zsh fish tcsh (experimental) clink (Windows, experimental)   Debian下\n$sudo apt install autojump 在 .bashrc 中加入\nsource /usr/share/autojump/autojump.bash 或是參考 /usr/share/doc/autojump/README.Debian\nWindows下\nautojump 在 windows 下要配合 clink 使用。\n下載原始碼\n$git clone git://github.com/joelthelion/autojump.git 照指示安裝\n$cd autojump $./install.py or ./uninstall.py 使用 autojump 或是更簡化的指令 j\n說明\n$autojump --help autojump 會記得你去過的目錄，之後要再切換到之前去過的目錄， 只要直接打目錄名稱就可以，若有同名的目錄，多換幾次 tab\n指令說明\nusage: autojump [-h] [-a DIRECTORY] [-i [WEIGHT]] [-d [WEIGHT]] [--complete] [--purge] [-s] [-v] [DIRECTORY [DIRECTORY ...]] Automatically jump to directory passed as an argument. positional arguments: DIRECTORY directory to jump to optional arguments: -h, --help show this help message and exit -a DIRECTORY, --add DIRECTORY add path -i [WEIGHT], --increase [WEIGHT] increase current directory weight -d [WEIGHT], --decrease [WEIGHT] decrease current directory weight --complete used for tab completion --purge remove non-existent paths from database -s, --stat show database entries and their key weights -v, --version show version information  autojump 會有個文件記錄每個目錄的權重。\n$autojump -s #看目前的目錄資料 /home/xxx/.local/share/autojump/autojump.txt C:\\Users\\XXX\\AppData\\Roaming\\autojump\\autojump.txt 其他 目前在 Windows 下的環境是 cmder + clink\n執行的問題不少， Python 是用 Anaconda3 ，\n改天再來調整看看。\n參考連結  cd is Wasting Your Time by Olivier Lacan  Autojump "
},
{
	"uri": "/tags/unix/",
	"title": "unix",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/reading-dokusho-issatsu-matomenasai-2013/",
	"title": "Reading 活用一輩子的讀書筆記術【完全攻略版】2013",
	"tags": ["reading", "study"],
	"description": "簡短心得",
	"content": "活用一輩子的讀書筆記術【完全攻略版】 2013 作者： 奧野宣之 簡單筆記心得。\nTask list: 😄\n初稿 修正 completed  資料 活用一輩子的讀書筆記術【完全攻略版】@ 博客來\n活用一輩子的讀書筆記術【完全攻略版】 (読書は1冊のノートにまとめなさい[完全版])\n 作者： 奧野宣之\n 譯者： 林佳翰 出版社：大田\n 出版日期：2016/10/12 語言：繁體中文 定價：280元 優惠價：79折221元 ISBN：9789861794648 叢書系列：CREATIVE 規格：平裝 / 256頁 / 25k正 / 14.8 x 21 cm / 普通級 / 單色印刷 / 初版 出版地：台灣 本書分類：社會科學\u0026gt; 閱讀 本書分類：考試用書\u0026gt; 學習方法 Amazon-JP Amazon-US  前言  只看沒記 跟沒看是一樣的。 吸收的技術 利用筆記把書變成自已的血肉  買了什麼書 書中特別的部分 感想是什麼？  另外本書主要是以實體書的閱讀、筆記體驗為主， 我想順便整理數位閱讀的整理方式。\n  第1章 利用筆記本管理「閱讀體驗」  和書的相處方式將會戲劇性地改變  相遇的方法：選想看的書 買書的方法：確實選到對自已有益的書 看書的方法：促進理解加深思考的看書方式 活用的方法：活用看書得到的資訊的方法  把筆記本變成是閱讀時的夥伴  想到就寫：有遇到想看的書，就記下來，這邊我記錄在 Wunderlist 選書單：想看、想買的書集中記錄 剪貼報導文章：實體剪貼薄、或是數位的我記在 Evernote 讀書筆記：實體筆記、數位的目前用 Hugo 記錄在 Github Page  持續做必然會有回報  能持續的記錄，才能內化變成自已的東西  因為做筆記，所以養成良好的閱讀習慣  習慣化：持續的做，養成習慣 讓回報變大：整理筆記可以有很多的好處 可以改變自已的方法：時時檢討、改進自已。  管理「找書」「看書」「活用」  找書：蒐集書的資訊、以免買到不必要的書 買書：書店、圖書館親眼看過想要的書，再買。 看書：邊看邊筆記。有感觸的地方、想作記號的地方、想節錄內容的地方 記錄：在看書時獲得心得、感動時，確實記錄下來 活用：反履看筆記，有助於生成知識、提升自我  建構起閱讀步驟的架構  重要的書先看，排定重要順序  把閱讀資訊統一化的好處  簡單容易 不會感到壓力，可以持續 自由度高，可以自已調整 所有資訊存在同一個地方 完全不需要猶豫要寫入還是參考 因為全混在一起，才能 成為活用時的提示 (ME) 收集 Evernote，單篇文章 blog，集合成冊 gitbook  統整成一本筆記本的技巧(lifelog)  不管什麼事都寫在這裡(集中管理) 按照時間順序寫(以時間排序) 要寫日期(以時間作為 Index) 使用速記和略記(省下記錄的時間) 能貼就貼(剪貼整理，省時間)   第2章 指名購買必需書籍的「選書單」製作方式  為什麼「選書單」會變成財產呢  找到想看的書 -\u0026gt; 看一下實體書確認內容 -\u0026gt; 選購  靠筆記掌握選書的主導權  用選書單，減少衝動購物  到書店買書才會留下印象  能看過實體最好，至少也要看過網路上試閱的章節  「選書單」的製作方法  作者會依書作者、類型、出版社分類，方便整理  數位化選書單有好處也有壞處  數位化選書單方便，但是也容易變得太長  指名購買的威力  減少閒逛的時間  把日常生活當作找題材的現場  蒐集資訊不限於書，生活、網路都是重要來源  把選書單和筆記本連結在一起  閱讀完，重要的是心得、以及把資訊內化於生活中  尋找可順利找到書的「樞紐書」  閱讀指南？  掌握報紙和雜誌書評的習慣  書評，網站  花一個星期閱讀報紙書評  閱讀別人的書評，可以省下不了自已找書的時間。   第3章 把閱讀過的內容變成財產的「讀書筆記術」  可以看得到成果  讀書心得持續的寫作，能得到不少的成就感  寫讀書筆記就可改變閱讀方式  讀書筆記 = 摘錄書本內容 + 自已的心得感想  讀書筆記只寫「一句話」也可以  筆記，只記重要的事，就算只記一句話也可以。 寫作的動作，也算是整理自已的想法。  為什麼無法持續寫讀書筆記呢？  寫多寫少沒關係，重要的是持續寫作  只要寫讀書筆記就可以變成財產  加深記憶 過往記錄  以寫讀書筆記為前提，決定要看的書  邊看邊記，似乎不是好方法，閱讀動作會一直被中斷 過濾審查的工作 瀏覽一遍：略讀, 上摺角記號 再讀一遍：前次記號再讀，在 「還是不錯」的地方再下摺角記號 做記號：「看了三次，還是覺得不錯」的地方，用筆作記號  「邊看書邊整理」的方法  準備三種標籤：①瀏覽一次、②再看一遍、③做記號 中斷閱讀時貼上① 不用看完整本書，也可以重讀一次。中斷時，貼上② 再讀一遍，停下來時，貼上③ 交互運用三種貼紙，同時  和書本對話的做記號技巧  「______」直線：算是重要，先記再說 「～～～」波浪：非常重要，個人覺得很有趣，想記起來活用在其他地方 「○ 」把重要的字圈起來：專有名詞，關鍵字句，吸引目光  「蔥肉串式讀書筆記」的製作方法  蔥肉串式筆記：摘記 + 心得 讀書筆記：至少要有 寫的日期、書名、作者 還想再多寫一點的人，「蔥肉串式讀書筆記」 對自已重要的敘述(摘錄) 自已的讀後感想(評語) (ME) 自已的話，記錄在 twitter， 所有簡單的感想都丟在這  靠摘錄咀嚼書本內容  摘錄內容有助於記憶 可以加深理解文章的能力  找出具代表性的一句話  只要寫讓自已感動的部分 代表閱讀體驗的一句話 比較簡單的就是直接抄下標題  從書本得到獨創的想法  從書本得到獨特的想法。能在讀完後，得到獨特的看法  剪貼式讀書筆記  收集跟書有關的資訊、書腰、書單…  貼上書本的影印，反覆重看  收集最能代表這本書的一頁  反覆重看書評，加深印象  蒐集書評，參考別人的看法  因為「陳舊」而顯現出來的書籍核心價值  回顧之前的筆記，可能得到很多東西  用讀書筆記提升自我  讀書筆記是和書相處的證據 書本不重要，重要的是讀完之後得到的心得   第4章 提升自我的「反覆閱讀筆記法」  由閱讀體驗建立起自己的思想  讀書筆記才能將書的內容內化，成為自已的想法。  能夠產出才能變成財產 選擇反覆閱讀的場合  不斷重覆看讀書筆記，才能加深理解 設定一個空閒的時段，複習筆記，加強印象  定期反覆閱讀  利用零碎的時間，複習讀書筆記  養成反覆閱讀的習慣 因反覆閱讀筆記而產生的「個人獨特見解」  記下自已的想法  靠反覆閱讀培養更有深度的自己  想稍微回頭看一下 - 重看讀書筆記 想再多想一些事 - 參考書上做記號的地方 想要從零開始重新輸入腦中 - 整本書重看一次  把過去的閱讀體驗援用到現在的閱讀  摘錄：當時自已覺得重要的地方 評語：顯示自已注意的事、思想、表達能力  透過大腦消化後遠離書籍 在部落格上寫書評 寫讀書筆記也可以提升寫文章的能力 靠讀書筆記「解決煩惱的方法」  從書中得到解決問題的能力  組合資訊變成新的創意  「所謂的創意，只不過是把已經存在的要素做新的組合而已」 但是要吸收夠多的元素，才能得到重組的可能  手會記住寫在哪裡 製作表示讀書筆記的「記號」 製作檢索用的「標籤」  實體的標籤  做成數位化索引  數位化索引、瀏覽器的書籤~  一口氣檢索兩百本書  筆記本號碼、日期、標記、書名、作者、出版社  克服「想不出來」  用 讀書筆記、書名、作者 作索引  可以做到「閱讀百遍」  第5章 讓閱讀體驗更充實的20項祕訣  (1)用信件檢索書籍 (2)在網路上使用「參考書籍」 (3)閱讀百科辭典 (4)定期訂閱，當作提醒 (5)「一般書店」「二手書店」「旅遊當地書店」 (6)主題困難的書從「弱點」開始進攻 (7)靠「堆積書山」將書讀完  把想讀的書放在同一個地方，依次讀完  (8)把古典書籍放在枕邊  助眠的書  (9)帶三本書走，一起讀  帶三本不同類型的書，以備閱讀  (10)家裡的每個角落都放書 (11)「剝掉」書衣更清爽 (12)雜誌要邊撕邊看 (13)不能小看耳朵聽到的情報 (14)帶著很寶貴的筆  選一支愛用的筆  (15)把名言做成標籤  把名言做成標籤貼有書皮  (16)從「摘錄」開始寫  不知道怎麼寫心得，就先行摘錄下手 「引用是魔法手杖」  (17)不知道怎麼做時就「從頭印到尾」 (18)靠「自己的版權頁」了解書的履歷  購買的店鋪 購買的日期 看完的日期 做完記號的日期 寫完讀書筆記的日期  (19)書和筆記本互相參考 (20)把書櫃當成是閱讀生活的基地  喜愛書籍專區：好書，想一看再看的書 廢棄書籍專區：不再看的書 筆記本專區：放最近的筆記    附錄 寫筆記時派得上用場的26種文具  TODO : 有些不錯的文具，改天整理，放到 Wunderlist  結語  讀書 - 筆記 - 改進自已的生活  參考連結  活用一輩子的讀書筆記術【完全攻略版】@ 博客來 "
},
{
	"uri": "/tags/study/",
	"title": "study",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/reading-version-control-with-git-2nd/",
	"title": "Reading Version Control With Git 2nd",
	"tags": ["reading", "git"],
	"description": "Version Control with Git,2nd  簡單心得",
	"content": "Version Control with Git, 2nd Edition 簡單的一些筆記。\nTask list: 😄\n初稿 再讀 筆記 完成  Version Control with Git, 2nd Edition  Powerful tools and techniques for collaborative software development\n By Jon Loeliger, Matthew McCullough Publisher: O\u0026rsquo;Reilly Media Release Date: August 2012 Pages: 456  版本控制使用Git 第二版\n 作者：Jon Loeliger 譯者：吳曜撰 出版社：歐萊禮 出版日：2013/1/25 ISBN：9789862766699 語言：中文繁體 規格：平裝 開數：18.5x23 頁數：452 出版地：台灣  Exercise Codes\n概述  這本書可以幫助您快速搞懂如何使用Git來追蹤、分支、合併並且管理程式碼修訂版本。 藉由詳盡的步驟說明，本書將帶領您了解Git的基礎與進階技術， 充分發揮這套版本控制系統的強大功能。  Ch1 簡介  Git by Linus Torvalds at 2005，主要是用於 Linux Kernel 開發使用，之前是用 BitKeeper 分散式、分布式、去中心化，代表不需要中央管理，可以各自修改，最後再視需求合併。 Git 主要是由 C 寫成的，速度快 利用 SHA-1 hashes 來辨識檔案  Ch2 安裝 Git  Debian/Ubuntu: sudo apt install git MicroSoft Windows 下有兩種 git@Cygwin, Git for Windows@msysGit 其他工具：\n Github Desktop TortoiseGit gitk git-gui   Ch3 準備開始 建立程式庫 在想監控的目錄中 git init 即會產生一個隱形的 .git 目錄，用來存放修改記錄。\n加入檔案\n$git add somefile.txt $git commit -m \u0026#34;Initial Message\u0026#34; --author=\u0026#34;Jon Doe \u0026lt;jdl@example.com\u0026gt;\u0026#34; $git status 提交後，改動會進到本地的儲存庫中。\n預先設定好作者資料\n$git config user.name \u0026#34;Joe Due\u0026#34; $git config user.email \u0026#34;joe@example\u0026#34; 如果前面的 somefile.txt 改動過後，只要再 commit 就好，不必 add\ngit log: 檢視目前的修改記錄。\ncommit e62f7fd572775ca2479e3ae4ce64bd73ded6a532 (HEAD -\u0026gt; master) Author: Nero Miller \u0026lt;ming927@spp.url.com.tw\u0026gt; Date: Sun Apr 1 05:22:46 2018 +0800 readingHackingvim Ch7,first draft commit 後的是 SHA-1 hash，用來分辨各版本間的不同\nSee Also\n git log – the Good Parts  git show: 看詳細資料\ngit diff a-hash b-hash\n$git mv somefile.txt somefileB.txt $git rm somefileB.txt $git commit -m \u0026#34;mv rm some file\u0026#34; 檔案修改都是要提交後，才會生效。\ngit clone url_to_the_depo: copy depo to local\n設定\n --file (.git/config): 整個程式庫 --global (~/.gitconfig): 使用者 --system (/etc/gitconfig): 整個系統  別名\ngit config --global alias.show-graph 'log --graph --abbrev-commit --pretty=oneline'\n之後打git show-graph 就好\nCh4 基本概念 Git 版本控制的一些概念。\n程式庫 Repositories\n程式庫：\n Depository n. 貯藏所， Repository n. 容器；貯藏處， 基本上算是同義字。\n 程式庫 = 檔案 + 修改記錄(及作者、日期) ，以資料夾為操作單位\n翻譯術語，參考 git-it/guide/locale-zhtw.json\nGIT物件\n Blobs Binary large object，各版本間的差異以二進位物件儲存，\n 應該是在 .git/object/ 下的檔案\n Tree 各版本的目錄資訊，各 blos 的辨識碼，以 UNIX 來說 blobs 若是檔案，Tree 算是目錄\n Commits 提交 提交物件有每次提交時的所有資訊，作者、時間、歷史資訊\n Tags SHA1-hashs 難記， Tags提供一個別名的方式，\n 像是： 8.0.1616-Alpha 這類方便記憶的名字\n  索引 Index\n 　一個動態、暫時的二進位檔，用以描述目前的檔案結構\n See Also\nGit 內部原理 - Git 物件\n可尋址內容名稱 Content-Addressable Names\n 很長的名字，這個是？ GIT 內的物件都有一個 SHA1-HASH 代碼來辨識 SHA1產生值有 160 位元，通常用 40 位的 16 進位數字表示  ** Git 追蹤內容**\n GIT 追蹤的是檔案內容，每當有檔案改動，GIT 會計算新的 SHA1-HASH，將改動存在新的 BLOB 中  Table 4-1. Database comparison\n   系統 索引機制 資料儲存     傳統資料庫 ISAM 資料記錄   UNIX 檔案系統 目錄 資料塊   GIT .git/object/hash 樹狀物件內容 物件，Blob 樹狀物件    打包檔案\nGIT 只儲存各版本間的差異，所以佔的磁碟空間很少\n物件儲存的示意圖\n.git/目錄內部\n$git init 建立一個檔案庫後，會有一個 .git 目錄， 內部儲存變動記錄，和一些資訊。\n物件，雜湊、及Blobs\n index 是目前檔案庫的樹狀結構 git ls-files -s 顯示目前的 index、和 working tree， -s 會顯示 SHA1-hash git write-tree 將目前的index寫入樹狀結構中  Git與SHA1-hash\n 同樣的檔案庫狀態、經計算後，會得到同樣的SHA1-hash； 換而言之，同樣的SHA1-hash，代表目前檔案庫的狀態是一樣的。 語法  樹狀結構\n提交\n每次的提交會儲存這些訊息：\n 樹狀物件名稱、檔案關聯性 作者姓名、修改時間 提交者姓名、提交時間 提交訊息 預設，作者=提交者  標籤\n標籤(TAG)，基本上就是別名(Alias)的功能 分兩種： 1. 輕量 lightweight tag: 不會建立永久物件 2. 標示 annotated tag: 會建立你提交的物件\nCh5 檔案管理及索引 基本上，本章討論檔案管理的一些方法，create, remove,move,rename\n索引\n被git add指令加入的指令，才會被加入 index中\nGit中的檔案分類\n 被追蹤 已被 add 的檔案\n 被忽略 .gitignore 內的檔案，暫存檔、草稿檔、個人註記、程式自動產生的檔案。\n 不被追蹤 不屬於前兩類的檔案\n  使用git commit\ngit commit --all(-a) : 加入所有未被追蹤檔案\n使用git rm\n 使用這個指令，只是把檔案解除追蹤，或是說移出 index， 不會刪除檔案，想刪檔案還是要用 rm 但檔案還會存在歷史記錄中，要把檔案從歷史記錄中完全刪除的話，要用 git rm --cached xxx，但要小心使用 要回復被刪除的檔案的話，要用 git checkout HEAD -- xxx-file  使用git mv\n移動、重新命名檔案。\ngit log --follow xxx-file :列出該內容的所有歷史記錄。\n追蹤重新命名檔案的兩三事\n subversion 追蹤檔案的方式較沒效率 git不會重新追蹤命名，而是只改變樹狀結構。  .gitignore檔案\n在這個檔案記錄要忽略的檔案：\n # 開頭的行是註解，文字後有 # 則不會被視為註解 空白行會被忽略 單純的檔名。git 會去找同檔名的檔案 目錄名，以 / 結尾，會去找同名的目錄，會忽略同名的檔案。 萬用字元 * ， 同unix 使用方式 驚謹號 ! , not，會這行寫的規則反過來執行  Git允許你在檔案庫的任何目錄放 .gitignore ，各目錄下都可以有 自已的 .gitignore\n為了解決多個 .gitignore 檔案，Git 有忽略的優先順序的規則。 以下優先權由高到低排為：\n 命令列指令加入的規則 同目錄中的 .gitignore 父目錄的 .gitignore, 離越遠的目錄，其 .gitignore 的優先權越低 .git/info/exclude 檔案中的規則 寫在 core.excludefile 中的規則  .gitignore 這個檔案也會被追蹤，如果不想讓 .gitignore 被追蹤， 可以把規則放在 .git/info/exclude 中，就不會被複製了。\ngit的物件模型及檔案\npass\nCh6 提交 提交：檔案庫間的變動。\n提交會將目前的狀態，送到檔案庫，Git只會儲存變動的部分， 並產生新的 SHA1-hash。Git 很適合經常性的提交。\n單元改變集合\nCommit 有點像拍照，儲存了那個瞬間檔案庫的樣子。\n辨識提交\nHEAD : 最新提交版本的別名。\nGit 中有許多寫提交名稱的方式，可以來存取、比較變動。\n絕對提交名稱\n絕對提交名稱 SHA1-hash\n 160 bit，40 位的十六進位字元是唯一、獨特的名稱， 若兩個提交的辨識碼一樣，可知兩個提交的狀態應該是一樣的。 你也可以獨特的前幾碼代替 40 位的長碼。  ref 與 symref\nref : 用另一個好記的名字，來代替較長的 SHA1-hash , 像是 HEAD,tags symref(symbolic reference): 用來代表 ref 的別名\n基本上 ref 就是存在下面目錄的檔案：\n.git/ref .git/refs/ref .git/refs/tags/ref # 標籤 .git/refs/heads/ref # 本地 .git/refs/remotes/ref # 遠端 .git/refs/remotes/ref/HEAD Git 內部已有的 ref\n HEAD 指向目前最新的分支 ORIG_HEAD 某些動作中，會先把目前的 HEAD 先記錄在這，以備使用 FETCH_HEAD 使用 git fetch 時，會把動作時，遠端的分支，存在這 MERGE_HEAD 執行合併時，會將被合併的分支，記錄在這  這些都可以用 git symbolic-ref 來管理。\nSee Also:\n Git 內部原理 - Git References 第 11 天：認識 Git 物件的一般參照與符號參照  相對提交名稱\n 就像 unix 中的目錄操作有絕對路徑、相對路徑，git 的別名也是\n ^ : 同世代中選擇不同的父物件\n ~ : 向上層選擇父物件\n 縮寫: C^ = C^1, C^^ = C^2 = C^1^1\n master 或 master^ 指的是倒數第二個提交\n master^2 或 master~2 指的就是倒數第三個，\n  常用指令\n git rev-parse master~3^2^2 git show-branch --more=35|tail -10  送交歷史記錄\n查閱過往提交記錄\nHeAD: 目前最新的提交 master: 目前的主分支\n主要的指令是 git log，等同於 git log HEAD\n$ git log --pretty=short --abbrev-commit -p master~12..master~10 --pretty=short: 列印的格式, (online, short, full) --abbrev-commit: SHA1-hash 以縮寫列出 master~12..master~10 範圍 -p: 列出有改動的檔案\ngit show 用來印出儲存的物件\n git show HEAD git show origin/master:Makefile  ** 送交的圖示**\nGit 使用 DAG(Directed acyclic graph 有向非循環圖)\n 所有的線段都是有方向性的 由任一點出發，無法回到起點  送交範圍\ngit log ^X Y = git log X..Y\nstart..end : 兩個點代表 相減 start...end: 三個點代表 兩者間的 相對差異\n尋找提交\n使用 git bisect\ngit bisect 可以將一些有特定問題的提交分離出來。可以把一些有問題、有 bug 的提交丟掉。\n 怎樣才能找出 有問題的提交？ 先找出 壞的提交，通常是目前的提交 HEAD，有出問題的版本。 而好的提交，通常應該是舊的提交，而要多舊的版本，可能就要測試看看  git bisect 在給定 good , bad 後，會以互動式的提問，來幫你找出有問題的地方。\n使用 git blame\n由指令可以，這可以幫你找出產生問題的兇手 ，會在每個改變後，註記這個變動是在哪個提交後產生的。\n使用 git log -Sstring\ngit log -Sstring 可以找出 string 這個字串是在哪個版本加入的。\nCh7 分支  分支是： 一個專案中，為了不同的目的，可能需要的不同的方向，像是 dev, build, stable, alpha, \u0026hellip;\n 而分支就是使專案有不同的特化型態而出現的功能。\n  使用分支的理由\n 開發新版本： v0.1, v1.1, v1.9 封裝開發的過程：prototype, trial, stable, release 開發新功能，為了開發新功能，與原來的程式碼分離開來 其他因素  分支名稱\n 預設的分支是 master 名稱可以使用 \\ ，但是不能用 \\ 結尾 開頭不能用 - 減號 被斜線分開的部分，不能以 . 開頭， 像 feature/.new 這樣就是錯的 分支名不能包含兩個連續的點 .. 不能包含:  空白字元 Git 保留字元， ~ ，^ , : , ? , * , [ 像是 ASCII 控制字元 ，小於 \\040 的八進位字元，或是 DEL \\177 octal   使用分支\n分支就像目前行駛的路徑，決定你取出哪些檔案，預設是 master\n建立分支\n$git branch some-branch-name/new-commit 列出分支\n$git branch 檢視分支\n顯示更詳細的資訊\n$git show-branch -r: remote -a: all\n取出分支\n使用 git checkout 能取出其他分支的內容。或是說切換到另一個分支。 而分支的有改動在未提交之前，Git 會發出錯誤訊息。\n合併分支\n如果你目前工作的分支、和你想切換的分支有衝突，這時就需要合併分支了。\n$git checkout -m dev 建立、並取出新的分支\n建立新分支後，馬上切換過去\n$git checkout -b bug/pr3 # 若是遇到問題，可以下面的指令 $git checkout -b new-branch start-point 缷載的 HEAD 分支\n Detached HEAD: HEAD 通常會指向某個分支，但是在某些操作下 HEAD 剛才沒有指向分支時，這個就是斷頭了\n  See Also * 【冷知識】斷頭（detached HEAD）是怎麼一回事？\n刪除分支\n想要刪除的分支，用 -d 選項\n$git branch -d bug/pr-3 若想刪的分支上，有一些變動是主要分支沒有的，可能沒辦法刪除， 這時可以將變動合併到主支線後，這個分支就能刪了。\n$git merge bug/pr-3 $git branch -d bug/pr-3 Ch8 Diffs Diffs 比較兩個物件的差異。 Unix 有一個指令 diff 也是用來比較檔案間的差異。\n$ diff -u initial rewrite --- initial 1867-01-02 11:22:33.000000000 -0500 +++ rewrite 2000-01-02 11:23:45.000000000 -0500 @@ -1,4 +1,5 @@ -Now is the time +Today is the time For all good men +And women To come to the aid Of their country.  -u : 使用 -u 的的顯示格式，+ , - 號 @@: 這行代表差異的行數，-1,4 指 initial 的 1,4 行 -: 減號開頭的是 old 有， new 沒有的內容 +: 加號開頭的是 old沒有，new 有的內容 : 空白開頭的是 old , new 共有的內容  git diff 指令形式\n git diff: 比較目前目錄狀態，與索引間的差異 git diff commit:比較 commit 與索引 git diff commit1 commit2: 比較兩個 commit 的差異 git diff --staged commit: 比較已進入 staged，與 HEAD git diff --cached 目前狀態，和前一次 commit 比較 staged: 已 git add，還未 commit，用這個會比較直覺\n -M: 偵測改名檔案\n -w: 忽略空白\n --stat: 多顯示一些統計數據\n --color: 輸出著色\n  git diff 範例\npass\ngit diff 指令、及送交範圍\n使用路徑限制結合 git diff 指令\n git diff master~5 master Documentation/git-add.txt: 可以看單一檔案版本間的差異\n  比較 diffs 在 svn 和 git 差別\n svn 是 client-server base 會把差異合成一個檔案，傳送給你， git 是運算、檢索出兩個樹狀檔的差別 git 使用的方式較快  Ch9 Merge 合併 多人合作時，要將各別的成果整合時，就需要合併(Merge)資料。 合併時，其本上是把兩個分支整合成一個新的 commit 來表示這個合併後的新狀態。 有衝突的部分，會在 Index 上標示 unmerged ，讓使用者決定。\n合併兩個分支\n git merge alternate: 將 alternate 合併到目前分支  有衝突的合併\n如果在合併的過程中，有衝突的檔案，會將兩個版本的內容放在檔案中， 自行解決衝突的檔案。\n處理合併衝突\n找到衝突的檔案\n git status, git ls-files -u 可以用來顯示工作目錄中尚未被合併的檔案集合。  檢查衝突\ngit log --merge --left-right -p\n --merge 只顯示跟衝突檔案相關的提交 --left-right 當次的提交是從左邊來的，(\u0026ndash;ours 我們起始的版本，\u0026ndash;theirs 別人合併進來的版本) -p 顯示訊息跟修正檔案之間跟每個提交的關係  Git 如何追蹤衝突\n .git/MERGE\\_HEAD : 放了要合併的提交的 SHA1 git/MERGE\\_MSG : 放了解決衝突後提交的預設合併訊息 Git的索引包含了衝突檔案的三個拷貝，分支起點版本，我們的，他們的，編號分別為1,2,3 衝突的版本存在工作目錄的檔案中，沒有存在索引中。你用 git diff 時，一定是比較索引、和工作目錄檔案  放棄或是重新合併\n git reset --hard HEAD : 可以回復到執行 git merge 之前  合併的策略\n之前的例子是簡單的兩方合併，若是三方以上的情形的話。\n 已是最新的 合併時，會以最新的提交為主來合併 快轉(fast-forward) 快轉合併 發生在你目前的分支已有其他分支的內容時，只要移動 HEAD 到最新的提交就好。  正常的合併\n 解決(Resolve) 兩個親屬分支，依兩方特徵，產生一個新的子分支 遞迴(Recursive) 解決多分支合併的策略，一次處理兩個分支，進而將多分支簡化成兩分支的情形 章魚(Octopus) 設計用來處理多分支的狀況，多次呼叫 遞迴策略，每次處理一目標分支，但是遇到衝突時，還是要人工解決。  特別的合併\n 我們的(ours) 我們的 子樹(subtree) 子樹  翻譯有點…先pass\nCh10 修改送交 Commit 記錄著歷史、和變更記錄。 但是已送交的記錄也是有些工具可以修改。\n要注意的是，如果是會出現在別人容器的送交，記得不要修改，以免產生問題。\n使用 git reset 指令 git reset --soft commit\n git reset 的指令可以讓目前工作目錄的 HEAD, Index, 工作目錄 回到之前的某的狀態。     選項 HEAD 索引 工作目錄     --soft Yes No No   --mixed Yes Yes No   --hard Yes Yes Yes    Ch11 Stash and Reflog Ch12 遠端容器 Ch13 管理容器 Ch14 Patchs Ch15 掛鉤 Ch16 結合專案 Ch17 Submodule實務 Ch18 在 svn 容器上用 git Ch19 進階操作 Ch20 Tips Ch21 Git and Github Github 是有 社交功能的 原始碼分享網站。\n 有四種帳號形態：個人免費，個人收費，組織免費，組織收費 建立遠端的容器後，用 git remote add URL ，兩邊連結。 上傳使用： `git push -u origin master  Github 的 Watch`\n Watch 就像 twitter 的 follow ，會在主頁出現追蹤專案的動態 Fork 專案複製，想將專案往不同的方向發展。 Pull Request 對原專案的修改，發出請求，合併至原專案。 Star Favorite 的標記 Wiki 各專案的維基，用來寫文件。 Github Page 可用來放靜態 HTML GIST 用來貼短篇文章的功能, Pastebin  其他類似 Github 的網站\n SourceForge,Google Code Bitbucket(Mercirial,hg)  自架 Git\n Gitlab Gitea Gogs  Depository n. 貯藏所 Repository n. 容器；貯藏處\nqxnCIg7j\nGitBook 中文解說 - 2.4 https://wastemobile.gitbooks.io/gitbook-chinese/content/\n作者：Jon Loeliger 追蹤 譯者：吳曜撰 出版社：歐萊禮 出版社追蹤 功能說明 出版日：2013/1/25 ISBN：9789862766699 金石碼：2014713380050 語言：中文繁體 適讀年齡：全齡適讀\n編／譯者：吳曜撰 語言：中文繁體 規格：平裝 分級：普級 開數：18.5x23 頁數：452 出版地：台灣\n版本控制使用Git 第二版－目錄導覽說明\ngit-it/guide/locale-zhtw.json\n第1 章 簡介 第2章 安裝Git 第3章 準備開始 第4章 基本的Git概念 第5章 檔案管理以及索引 第6章 送交 第7章 分枝 第8章 Diffs 第9章 合併 第10章 修改送交 第11章 遠端容器 第12章 管理容器 第13章 補綴檔案 第14章 掛鉤 第15章 結合專案 第16章 在Subversion容器上使用Git\n===\nadd (加入) 把檔案內容加入索引 (index，又稱預存區 (stage) 或快取 (cac he)) bisect (二分法) 用二分法找出引入 bug 的變改更 branch (分支) 列出、建立或刪除分支 checkout (檢出) 把特定分支或路徑下的檔案檢出到工作樹 clone (克隆) 把版本庫克隆到新目錄 commit (提交) 把變更記錄到版本庫 diff (差異) 顯示兩提交版本之差異、提交版本與工作樹之差異等等 fetch (獲取) 從其他版本庫下載物件和參照 grep 從檔案中尋找文字並印出匹配特定型態的行 init (初始化) 建立空的 Git 版本庫或把已存在的版本庫重新初始化 log (日誌) 顯示提交日誌 merge (合併) 把兩段以上的開發歷史合在一起 mv (移動) 把檔案、目錄或符號連結移動或更名 pull (拉收) 從其他版本庫或本地分支獲取及整合資料 push (推送) 更新遠端版本庫的參照及相關物件 rebase (變基) 上游分支更新時，把本地提交向前接到新的頭端 reset (重設) 把目前的 HEAD 重設為指特定狀態 rm (移除) 把檔案從工作樹及索引移除 show (展示) 展示各種類型的物件 status (狀態) 展示工作樹的狀態 tag (標籤) 建立、列出、刪除、或驗證標籤物件及其 GPG 簽字\n參考連結  圖解Git Introduction to Git and GitHub for Python Developers  Site  2013 IT 邦幫忙鐵人賽 【30 天精通 Git 版本控管】by Will 保哥 連猴子都能懂的Git入門指南 by 貝格樂（Backlog） 為你自己學 Git by 高見龍 Pro Git,1st-zh-tw Pro Git,2nd Learning Git Branching 新北市教研中心－GIT版本控制 "
},
{
	"uri": "/tags/git/",
	"title": "git",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/categories/language/",
	"title": "Language",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/learn-language-in-six-months/",
	"title": "Learn Language in Six Months",
	"tags": ["reading", "video", "TED", "learning"],
	"description": "【TED】6個月掌握流利的外語學習方法",
	"content": "TED 影片簡單心得筆記。\n【TED】6個月掌握流利的外語學習方法 How to learn any language in six months by Chris Lonsdale at TEDxLingnanUniversity\n 原版 簡中翻譯  前言：\n Talent doesn\u0026rsquo;t matter Immersion per se，沉浸在環境中(per se(latin) = by itself)  4 Words  Meaning Relevance Attention Memory  5 Principles  1. Focus on language content that is relevant to you 工作需要，學習動機，能使你急切的想學會一種語言 2. Use your New language as a tool to communicate From Dday 1 實地使用能加強學習的效果。 3. When you first undertand the message, you will unconsciously acquire the language 當你能了解別人在說什麼，你已在無意識間吸收了語言 4. Physiological Training 實地的聽、說、讀、寫是很重要的。 5. Psychoplysiological State matter 情緒重要，開始時會說錯、聽錯，但是別讓這種情緒阻止你  7 Actions 1. listen a lot 多聽。  2. Focus on getting the meaning first (before the words) 了解意思比較重要，用上肢體語言也ok  3. Start Mixing 開始把你學到的東西混合運用。  4. Foscus the Core **Week 1. The Tool Box** 用新語言說出： * What is this? * How do you say? * I don't understand... **Week 2-3** 用簡單的名詞、動詞、形容詞練習 Pronouns,Common Verbs,Adjectives * you * that * me * give * hot **Week 4 Glue words** 多用連結詞 * But, And, Even though,  5. Get a language parent 找到一個能教你學語言的人 **Language Parent Rules** * Works to understnad what you are saying * Does not correct mistakes * Confirms understanding by using correct language * Uses word the learner knows  6. Copy the face 從母語者學習如何發音，運用臉部的肌群發音。  7. Direct connect to mental image 圖像連結，同一種東西，在不同的語言有不同的稱呼，以圖像來記憶最為直覺。  參考連結  TED Link English講稿 "
},
{
	"uri": "/tags/ted/",
	"title": "TED",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/learning/",
	"title": "learning",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/reading-hackingvim72/",
	"title": "Reading HackingVim 7.2",
	"tags": ["reading", "vim"],
	"description": "Hacking Vim 7.2 reading.",
	"content": "Hacking Vim 7.2 讀後心得。\n以及一些簡單的筆記、和心得記錄。\nTask list: 😄\n初稿 修正 incomplete completed  Hacking Vim 7.2  Ready-to-use hacks with solutions for common situations encountered by users of the Vim editor\n by Kim Schulz (Author) File Size: 1543 KB Print Length: 246 pages Publisher: Packt Publishing (April 29, 2010) Publication Date: April 29, 2010 Sold by: Amazon Digital Services LLC Language: English  Code Files\n概述 這本書大概是講一些比較進階的Vim設定使用的內容。\nTable of Contents:\n   原文 中文     Ch1: GETTING STARTED WITH VIM #簡介   Ch2: PERSONALIZING VIM #Vim個人化   Ch3: BETTER NAVIGATION #移動   Ch4: PRODUCTION BOOSTERS #增強生產力   Ch5: ADVANCED FORMATTING #進階格式化   Ch6: BASIC VIM SCRIPTING #基本 Vim Scripting   Ch7: EXTENDED VIM SCRIPTING #進階 Vim Scripting    Ch1: GETTING STARTED WITH VIM #簡介 簡介了 Vim 的歷史，從 ex,vi,STEVIE,Elvis,nvi,Vim,Vile。\n不過沒提到較新的 neovim。\n另外一些比較有趣的編輯器:\n Google 用 Rust 寫的新編輯器 xi-editor。 Emacs Sublime-text Visual Stuido Code Atom  Ch2: PERSONALIZING VIM #Vim個人化 2.1 設定檔的位置  作業系統的不同： Linux(.vimrc) , MSWin(_vimrc) 操作界面的不同： Console(vimrc), GUI(gvimrc), vi/ex mode(exrc)  在Vim下輸入指令，直接顯示目前的設定檔位置：\n:echo $HOME:echo $MYVIMRC:echo $MYGVIMRC gvimrc 主要是輸入一些在GUI特有的設定，最好是能把跟 vimrc的設定分開。\n2.2 字體 在GUI下輸入，可以打開字型視窗。\n:set guifont=* 不同的的作業系統下設定字型的方式有點差異。\n\u0026#34; Linux:set guifont=Courier\\ New\\ 14\u0026#34; MSWin:set guifont=Courier\\ New:14:help guifont\u0026#34;更多的資料 See Also: Setting the font in the GUI\n2.3 配色 (colorscheme) 配色在 console，和GUI下，同一colorscheme會有不同的效果， 所以選擇 colorscheme應該要注意。\n2.3.1 高亮 (hightlight) pass\n2.4 狀態列(statusline) 狀態列可以設定滿多東西的，文件名，格式，文件長度…\n:set statusline=%F%m%r%h%w\\ [FORMAT=%{\u0026amp;ff}]\\ [TYP[HEX=\\%02.2B]\\ [POS=%04l,%04v]\\ [%p%%]\\ [LEN=%L] 但這設定完後，不會馬上出現，要設定 statusline的位置在最後兩行，才會出現。\n:set laststatus=2 #狀態列在最後第二行:set laststatus=0 #狀態列關閉 2.5 切換選單、工具列 Menu,Toolbar 在GUI下，可以設定功能到選單、工具列上。\n2.6 自訂選單、工具列 增加選單\n:menu menupath command menu 的指令就是像 map 把選單映射到一個指令\n例如\n:menu Tabs.Next \u0026lt;ESC\u0026gt;:tabnext\u0026lt;cr\u0026gt; 2.7 修改頁籤(Tabs) 從 Vim 7.0開始支援 頁籤 Tabs，每個 Tabs有個別的屬性。\n:set tabline tabline-layout\u0026#34; Tabs的狀態列:set guitablabel\u0026#34; gvim的Tab狀態列 2.8 工作區個人化 2.8.1 光標 cursor :set cursorline\u0026#34; 顯示cursor line:highlight CursorLine guibg=lightblue ctermbg=lightgray\u0026#34; 設定 cursorline 顏色:set cursorcolumn\u0026#34; 顯示縱向的指標行:highlight CursorColumn guibg=blue ctermbg=gray\u0026#34; 設定 cursorcolumn 顏色:set nocursorcolumn\u0026#34; 關閉cursorcolumn 2.8.2 行號 line numbers \u0026#34; 打開行號:set number:set nu:set nonumber:set nonu\u0026#34; 預設的行號佔 4個space, 下面指令可以修改預設值:set numberwidth=`widch` 2.8.3 拼寫檢查 Spell checking Vim 7.0 以後有內建的 spell check\n:set spell\u0026#34; 打開拼寫檢查:set spelllang=en_us\u0026#34; 設定拼寫語言 錯字的配色\n 在console(terminal)下，紅底白字 在gvim下，紅色波浪底線  移動、更正\n 把遊標移到錯誤的字，輸入 z=，可以更正錯誤的拼字。 ]s and [s 可以移動到上一個、下一個錯誤拼字  2.8.4 工具提示 Tooltip 2.8.5 使用縮寫 abbreviations 使用縮寫來減少重複輸入\n:iabbrev myAddr 32 Lincoln Road, Birmingham B27 6PA, United Kingdom 可以在 輸入模式中，輸入 myAddr後，變成之前設定的地址。\n :abbreviate(abbr): Abbreviations for all modes #全模式 :iabbrev(iabbr): Abbreviations for the insert mode #輸入模式 :cabbrev(cabbr): Abbreviations for the command line only #命令模式  2.8.6 修改按鍵綁定 Key bindings :map \u0026lt;C-s\u0026gt; \u0026lt;esc\u0026gt;:w\u0026lt;cr\u0026gt; 把按鍵和指令重新指定。\n :map: For the Normal, Insert, Visual, and Command-line modes :imap: For the Insert mode only :cmap: For the Command-line mode only :nmap: For the Normal mode only :vmap: For the Visual mode only     Keys Notation     \u0026lt;BS\u0026gt; Backspace   \u0026lt;Tab\u0026gt; Tab   \u0026lt;CR\u0026gt; Enter   \u0026lt;Enter\u0026gt; Enter   \u0026lt;Return\u0026gt; Enter   \u0026lt;Esc\u0026gt; Escape   \u0026lt;Space\u0026gt; Space   \u0026lt;Up\u0026gt; Up arrow   \u0026lt;Down\u0026gt; Down arrow   \u0026lt;Left\u0026gt; Left arrow   \u0026lt;Right\u0026gt; Right arrow   \u0026lt;F1\u0026gt; - \u0026lt;F12\u0026gt; Function keys 1 to 12   #1, #2..#9,#0 Function keys F1 to F9, F1   \u0026lt;Insert\u0026gt; Insert   \u0026lt;Del\u0026gt; Delete   \u0026lt;Home\u0026gt; Home   \u0026lt;End\u0026gt; End   \u0026lt;PageUp\u0026gt; Page up   \u0026lt;PageDown\u0026gt; Page down    2.9 小結 這章說明了各種設定修改的方式。\nCh3: BETTER NAVIGATION #移動 本章說明在各文件快速移動的方式。遊標移動、在多文件中移動、使用說明文件、搜索、標記。\n3.1 文件內移動 3.1.1 基於上下文的移動 文件結構的不同，可分為兩種情形：\n 一般文件：段落、語句、單詞 程式碼：函數、區塊、單行  3.1.1.1 一般文件  h,j,k,l #左、下、上、右 {,} #段落首、尾 g, g; #最近修改過的地方，向前，向後 ( ,) #句首、句尾 w #下一個單詞首字母 b #前一個單詞首字母 e #移動到單詞末尾  單詞(Word)的定義:\n 由字母、數字、dash(-)、underline(_)組成 以非空白字母組成\n 3.1.1.2 程式碼 Vim無法辨識所有程式的結構，不過C語言預設是可以的。\n函數\n [[ and ][: Move backwards / forward to the next section beginning (for example, start of a function) [] and ]]: Move backwards / forward to the next section end (for example, end of a function)  區塊\n [{: Move to the beginning of the block ]}: Move to the end of the block  註解\n [/: Move to the beginning of the comment block ]/: Move to the end of the comment block  gd: 跳到變數定義區段 gD: 跳到全域變數定義區段\n3.1.2 在長行內移動  長行： 一行的內容過長，超過VIM視窗範圍的話，程式會自動把超出視窗寬的在下一行顯示。\n  gk,gj :會以視覺上的行為主而移動。\n3.2 使用 Help 說明文件 Vim的說明文件可以：\n 按  進入 或是在命令列輸入 :help \u0026lt;keyword\u0026gt;  移動 *  : 跳到 keyword 所指的位置 *  : 跳回前一個位置\n文章內還有一些比較進階的設定。\n3.3 在多個緩衝區(Buffer)間移動 打開的文件，是存在緩衝區(Buffer)中。\n :buffers: buffer list :buffer N: jump to buffer N :bnext(bn): Next buffer :bprevious(bp): Previous buffer  3.4 快速打開引用文件 像是在 C語言中的 #include\n#include \u0026#34;example.h\u0026#34; 在 example.h 上按 gf，Vim就會把檔案讀入緩衝區\n3.5 搜尋 Search 分三種：\n 在目前文件中搜索 在多文件中搜索 在說明文件中搜索  3.5.1 在目前文件中搜索 找單詞\n 普通模式下 ?example，命令模式下 /example可以找單詞 n,N:在找到的結果向上，向上移動。 //,??: 上一次搜索的輸入 #,*: 搜索在遊標上的單詞，向上移動， 向下移動  3.5.2 在多個文件中搜索 搜索的指令，在Unix系統下有 grep，MSWin下有 find,findstr， 而在 Vim下，有：\n:vimgrep /pattern/[j][g] file file2... fileN  /pattern/ : 正則表示式 j: 把結果輸入到 quickfix 列表 g: 如果在同一行內有三個符合的結果，則會都顯示  quickfix\n :clist:顯示 quickfix結果 cnext(cn),cprevious(cp):在 quickfix列表中移動  3.5.3 在說明文件中搜索 :helpgrep pattern [@LANG]\u0026#34; @LANG，可以指定說明文件的語言，例子：:helpgrep completion@en 如果是新增加的文件，可以用下面的指令生成文件tags\n:helptags /path/to/doc 3.6 標記位置 有時文件太長，要在個各處移動，標記(Marks)可以在某行前 作記號。例：\n 可見標記 隱形標記  3.6.1 可見標記 通常是會在行號前面，用來標記某一行的符號。\n:sign define name arguments 定義標記列顏色\n:highlight SignColumn guibg=darkgrey pass\n3.6.2 隱形標記 另一種標記方式，基本上看不到，除非打開標記列表\n:marks: 打開標記列表 ma : 標記 a \\a: 移動到a :deletemarks markid1 markid2 markid3:刪除標記 :delmarks a f-i 1-4:刪除 makrs :delmarks !:刪除目前buffer所有marks\n   標號 用法     0-9 保留內部使用，通常是最近開啟文件   a-z 本文件使用   A-Z 可以跟文件使用，如果有.viminfo存檔，下次打開Vim時，還可以使用    3.7 小結 這一節描述了cursor的移動，搜索、或是在各文件中移動的方式。\nCh4: PRODUCTION BOOSTERS #增強生產力 這一章會簡介一些能增加效率的工具。\n4.1 模版 建立模版 Template ，減少重複性的工作。\n4.1.1 模版文件 應該可以分為兩種行為\n 新建立文件時，讀取 已有的模版 或是骨架 Skeleton 在已存在的文件中，要加入小部分的文件結構 Snippets, 檔頭(C語言的 #include)，檔尾  方法：\n 建立模版檔：在 $VIMHOME/templates/下加入新的 file-type.tpl ，像是 html.tpl 設定程式設定： 加入 autocmd 在開啟新檔時，自動讀入模版。  4.1.2 把縮寫作為模版 前面有提為的功能 縮寫可以用來快速輸入一些結構，像是迴圈、或是snippets\n4.1.3 snipMate 更完整的功能，有人編寫了完整的 plugins。\nhttps://vimawesome.com/plugin/snipmate https://www.vim.org/scripts/script.php?script_id=2540 https://github.com/garbas/vim-snipmate\n4.1.4 其他 snippets Pluging 比較 http://vim-wiki.mawercer.de/wiki/topic/text-snippets-skeletons-templates.html\n除了 snipMate以外，還有其他plugins有snippets的功能\nUltiSnipsby HOLGER RAPP36216612 UltiSnips - The ultimate snippet solution for Vim. Send pull requests to SirVer/ultisnips!\nneosnippet-snippetsby SHOUGO1972908 The standard snippets repository for neosnippet\nvim-snippets * by HONZA POKORNY25449499 * vim-snipmate default snippets (Previously snipmate-snippets) * 這個是 snippets程式片段檔的集合\n4.2 Tag List 產生程式中的所有關鍵字、函數名、…\nTag List的產生要用外部的程式，常見的有：\n Exuberant Ctags: For C, C++, Java, Perl, Python, Vim, Ruby (and 25 others) Vtags: For Verilog files Jtags: For Java files Hdrtags: For C / C++, Asm, Lex / Yacc, LaTeX, Vim, and Maple Ptags: For Perl files  用法，可以快速跳到函數定義的地方。\n###　4.2.1 Tag List 的其他用法\n除了用來找函數、和變數外，還有其他用法。\n:help tags\n4.3 AutoComplete 自動補全 分三種\n 依前後文 依字典 Omnicompletion  4.3.1 已知單詞的自動補全\nC-p C-n 在打完的前兩個字母後按，\n會出現auto complete的選項，向前、或向後\n4.3.2 依字典的自動補全 利用已有的字典作 autocomplete\n設定字典檔 :set dictionary+=/path/to/dictionary/file/with/words\nC-x C-k x是進入autocomplete模式， k是從字典中找相近的單字。\n其他模式：\n Ctrl+l: Complete whole lines of the text Ctrl+n: Complete words from the current buffer Ctrl+k: Complete words from the dictionaries Ctrl+t: Complete words from the thesaurus (see :help \u0026lsquo;thesaurus\u0026rsquo;) Ctrl+i: Words from the current and included files S: Spelling the suggestions (Vim 7.0 and newer only)  4.3.3 Omnicompletion C-x C-o 進入 Omnicompletion 模式\npass\n4.3.4 多合一 autocomplete 把前面多種autocomplete模式整合 這個指令可以找到,CleverTab()\nhelp ins-complete\n可以用 Tab 來選取需要的選項。\n4.4 錄製巨集 Macros 用來錄製指令\n qa: Record from now on into register a. Any register can be used, but q is often used for simplicity. q: If pressed while recording, the recording is ended. @a: Executes the recording in register a (replace with any register). @@: Repeats the last executed command.  4.5 會話 Session Vim保存了許多資訊，分成幾種：\n View: 單一視窗的資訊 Session: 多個View的集合 Other: 其他通用的設定  4.5.1 簡單會話使用 保存目前視圖、會話\n:mkview file:mksession file:set viewdir=$HOME/.vim/views\u0026#34; 設定視圖存放的目錄 \u0026#34; 載入視圖方式$vim -S Session.vim:source Session.vim:loadview View.vim 4.5.2 個人化 Session 使用 pass\n4.5.3 Sessions as a project manager pass\n4.6 暫存器 和 Undo 分支  暫存器 Register: 儲存多個緩衝區的高級剪貼薄 Undo Branching: 文件修改的記錄  4.6.1 暫存器 4.6.2 Unod list 4.7 Folding 折疉 把段落、或是區塊 多行折疉成一行\n4.7.1 Simple text file outlining 4.7.2 Using vimdiff to track the changes 4.7.3 Navigation in vimdiff 4.7.4 Using diff to track changes 4.8 打開任意位置的文件 打開遠端的文件\n:Nread ftp://user@server/path/to/file:Nwrite server user passwd path/to/file 4.8.1 Faster remote file editing 4.9 小結 Ch5: ADVANCED FORMATTING 進階格式化 將文件重新排版的過程。\n 文本格式化 代碼格式化 使用外部工具格式化  5.1 文本格式化 5.1.1 文本分段 例：將長行自動斷行\ngpap\n5.1.2 內文對齊 向左、 置中、向右對齊\n5.1.3 標記標題 在 Markdown、reST中，H1、H2的語法可以寫成：\nLevel1 ====== Level2 ------ ### Level3 這邊利用接鍵組合，可以快速在文字下加上相同長度的 =，或-\n像在 New Heading上按 yypVr=o\n5.1.4 建立清單 用函式快速加入 lists的格式\n5.2 代碼格式化 排版良好的程式碼，對方便閱讀很有幫助。\n前面幾小節 介紹了縮排的幾個方式。\n Autoindent :set ai : 會依前一行的設定，縮排之後的文件 Smartindent :set si : smarter than autoindent Cindent: pass Indentexpr: pass  要貼程式碼時，可以用下面的指令，讓貼上的程式碼排版不會跑掉。\n:set paste:set nopaste:set pastetoggle 5.3 使用外部工具格式化 使用 其他程式來排版，像是 Indent,Berkeley Par,Tidy\n\u0026#34; 設定 indent:set equalprg=program Tidy 是用來排版 XML,HTML 文件的工具。\n\u0026#34; XML 文件au FileType xml exe\u0026#34;:silent 1,$!tidy --input-xml true --indent yes -q\u0026#34; \u0026#34; HTML 文件au FileType html,htm exe\u0026#34;:silent 1,$!tidy --indent yes -q\u0026#34; 5.4 小結 本章介紹了一些排版的方式\nCh6: BASIC VIM SCRIPTING 基本 Vim Scripting Vim可以透過 VimScript使用許多功能，且容易分享， 而且還可以支援外部語言，如python,ruby,perl,lua\u0026hellip;\n6.1 語法配色 syntax-color scheme syntax-color scheme會將程式中的 關鍵字以不同的顏色表示，\n不僅使程式易讀、而且可以容易發現打錯的字。\n語法上色，先要找出關鍵字，然後設置對應的顏色，以下是例子：\n:syntax match myComments\u0026#34;/\\*.*\\*/\u0026#34;:syntax keyword myVars x y:syntax match mySymbols\u0026#34;[{}();=]\u0026#34;:syntax keyword myKeywords if return:highlight myVars ctermfg=red guifg=red:highlight mySymbols ctermfg=blue guifg=blue:highlight myKeywords ctermfg=green guifg=green:highlight myComments ctermfg=yellow guifg=yellow 6.2 區域高亮 Syntax regions 像是注釋之類的，一整個區塊要上色的，例子如下：\n:syntax region myComments start=/\\/\\*/ end=/\\*\\// pass\n6.2.1 Color scheme and syntax coloring 除了個別指定顏色外，也可以用配色方案中定義的顏色， 這樣的話，可以隨著 color scheme改變語法顏色。\n6.3 使用腳本 Using scripts 除了自已開發功能外，也可以在網路上找別人寫好的plugin回來安裝\n Vim.org/Script Github/vim-scripts VimAwesome  6.3.1 Script types 依腳本的功能，有：\n colorscheme, syntax, utility, ftplugin, game, indent, patch\u0026hellip;  6.3.2 Installing scripts 安裝 VimScript 的方式，最基本的就是把 .vim 丟到 $HOME/.vim/ 的目錄下，\n不過，有些 plugins 檔案太多，於是目前就有一些比較方便的安裝管理方式：\n .vim，或是壓縮檔：直接(解壓)放到 $HOME/.vim/ 目錄下 Vimball格式: 是壓縮檔，安裝完 Vimball 後， $vim something.vba :so % 安裝 Vim Plugin Manager: 專門管理plugins的程式，可以直接從 github 上安裝腳本  pathogen : 主要是 runtime path manager Vundle : 滿多人用的，vimrc設定 github名字後，可以直接打 :PluginInstall 安裝 Vim-plug : 多了on-demand loading ，應該可以加快vim開啟的速度 談談 vim plugin-manager   6.3.3 Uninstalling scripts 移除的方式就直接和安裝方式相關，\n通常是把 .vim下的檔案移除，再把 vimrc內的設定去掉。\n6.4 腳本開發 Script development 寫自己想要的功能。\n在開發腳本時，可能要注意各個Vim的版本，在各平台上可用的功具、函數可能也不用， 在寫腳本時，要注意，另外一些功能最好也保留可以讓用戶修改的功能，保留彈性。\n6.4.1 Script writing basics Types VIM下只有字串、和數值\n數值包括：\n 十進位數字: 1,2,3,\u0026hellip;,100 十六進位: 0x01, 0x02,0x64 八進位: 01,02,03,\u0026hellip;, 0144 浮點數 float: 3.1415  例：\n:echo 10 + 0x10 + 010 字串\n 用單、雙引號包起來的字符: \u0026quot; \u0026quot; , ' ' \\ 是 Escape character \\n 是換行(new line)，\\r是 Return ,\\t是Tab, \\\u0026lt;CR\u0026gt;是 Return 其他的符號 參照下面連結  C語言中的 Escape sequences\n變數 Variables  字串 String: 字符的集合 數值 Number: 前面所述的十、十六、八進位的數字 List: An ordered sequence of items (an ordered array) 字典 Dictionary: An unordered associative array holding key-value pairs 函數參照 Funcref: A reference to a function  定義變數，都是用 :let 來賦值的\n:let myvar=somevalue:let myvalue=100\u0026#34;數值:let mystring=\u0026#34;this is a test\u0026#34; \u0026#34; 字串 型值會自動轉換\n:let myvar=\u0026#39;123\u0026#39;echo myvar-23\u0026#34; 會顯示100 字串經過數值運算會轉成數字。另有，型值強制轉換函數 string()\n:let myunber=mystring+0:let mystring=string(mynumber) List\nlist是一群變數的集合。 list[0]是第一個元素。\n:let mylistvar1 = [1, 2.7, 0x04,\u0026#34;six\u0026#34;, myvar, [1,2,3]] 字典 Dictionary\n字典是 key-value pairs，鍵和鍵值的互相參照的序列。\n:let mydictvar2 = {1:\u0026#34;one\u0026#34;,2: \u0026#34;two\u0026#34;,\u0026#34;tens\u0026#34;:{0: \u0026#34;ten\u0026#34;,1: \u0026#34;eleven\u0026#34;}} key不一定是數值，也不需要照順序。\n函式\n:let Myfunrefvar= function(\u0026#34;Myfunction\u0026#34;)  變量 Myfunrefvar , 綁定到 函數 Myfunction 自定變數名以大寫開頭，跟vim內建的變數區別。  :echo Myfunrefvar()  使用函數時，函數名後加 ()  刪除函數 delfunction function-name\n函數中使用的變數的 變數可視範圍 Scope 變數前的字母，代表變數的作用區域。\n[Scope]\n v: Vim predefined global scope g: Global scope b: Buffer scope—only available in the buffer where it was defined t: Tab scope—only available in the Vim tab where it was defined w: Window scope—only available to the current Vim window (viewport) l: Function scope—local to the function it is defined in s: Sourced file scope—local to a Vim script loaded using :source a: Argument scope—used in arguments for functions  Vim中的注釋是以引號開始 \\\u0026rdquo;\nlet g:sum=0function SumNumbers(num1,num2) let l:sum = a:num1+a:num2\u0026#34;check if previous sum was lower than this if g:sum \u0026lt; l:sum let g:sum=l:sum endif return l:sumendfunction\u0026#34; test code, this will print 7 (value of l:sum)echo SumNumbers(3,4)\u0026#34; this should also print 7 (value of g:sum)echo g:sum See Also:\n LVtHW:Number LVtHW:String LVtHW:Lists LVtHW:Dictionary LVtHW:Function LVtHW:Variable_Scope  Conditions If條件式\nif condition1 code-to-execute-if-condition1-is-trueelse if condition2 code-to-execute-if-condition2-is-true endifendif See Also:\n :help if 向下翻，還有 while, for, try , catch, throw,final LVtWY:Conditional  Working with lists and dictionaries List, Dic 的 CRUD\n[CRUD」分別為 Create, Read, Update, Delete\nCreate\n:let mylist = [1,2,3,\u0026#34;cat\u0026#34;, myvar1]:let mydicfruit = {\u0026#39;banana\u0026#39;:\u0026#39;yellow\u0026#39;,\u0026#39;apple\u0026#39;:\u0026#39;green\u0026#39;,\u0026#39;orange\u0026#39;:\u0026#39;orange\u0026#39;} Read\n:echo mylist[0],mylist[-1]\u0026#34; 1 , cat (-1是最後的一個值):echo mydicfruit[\u0026#39;banana\u0026#39;]\u0026#34; yellow \u0026#34; 如果 key是[0-9][a-zA-Z][_]的話:echo mydicfruit.banana\u0026#34; yellow Update\n:let mylist[0]=99\u0026#34; :let mydicfruit[\u0026#39;banana\u0026#39;]=\u0026#39;green\u0026#39;\u0026#34;  Delete\n\u0026#34;用 unlet:unlet mylist[0]:unlet mydicfruit[\u0026#39;banana\u0026#39;]\u0026#34; remove():call remove(mylist,2) 其他操作\n:let mylist3 = mylist1 + mylist:let mylist4 += [5,6,7,8]\u0026#34; extend() 會把兩個 list 相加:call extend(mylist3,mylist4):echo myilst3\u0026#34; mylist3會變成 mylist3 + mylist4, mylist4 不變 \u0026#34; add() list4 加進 list3，變成 list3 的一個元素:call add(mylist3,mylist4) See Also:\n :help Dictionary, List :help get(), has_key(), items(), keys(), values() :help add(), extend(), remove()  Loops For Loops\nfor item in mylist call remove(mylist, 0)endfor While Loops\n:let lnum = 1:while lnum \u0026lt;= line(\u0026#34;$\u0026#34;) :call FixLine(lnum) :let lnum = lnum + 1:endwhile See Also:\n :help break : 離開 loop :help continue : 開始下一個loop  Creating functions  函數的定義   function Name (arg1, arg2, ... argN) keyword code-to-excute-when-func-call endfunction   keyword\n dict: 把函數綁定到一個 dict range: 函數的作用範圍 特別的變數: a:000 代表所有 argX的集合  Scope 通常函數是local的，可以在函數前加 g:以代表全域函數。 這邊參照\nScope變數值域\nVariable argument list  `:help a:000: 所以參數集合，是 List 型態 a:0: 參數個數 a:1: 第一個參數名字，其他以此類推 a:2, a:3\u0026hellip;  See Also: * :help function-argument * :help local-variables * :help function-lsit\n6.5 小結 Summary VimScript 的安裝、移除，管理。\n基本的資料型態、結構、操作。\nCh7: EXTENDED VIM SCRIPTING 進階 Vim Scripting 本章會介紹 Script的結構，技巧、如何除錯、使用其他外部語言。\n7.1 Script structure 7.1.1 Script header 腳本前最好加上一個檔頭，說明腳本的一些基本資料。 例：作者、日期、版本，以及 著作權授權聲明。\n Open Source License CreativeCommons  像是：\n\u0026#34; myscript.vim : Example script to show how a script is structured. \u0026#34; Version : 1.0.5 \u0026#34; Maintainer : Who Who \u0026lt;who@what.com\u0026gt; \u0026#34; Last modified : 01/01/2007 \u0026#34; License : This script is released under the Vim License. 7.1.2 Script-loaded check 腳本在執行前，最好先檢查腳本是否正常載入，以免發生問題。\nex: 如果腳本載入不成功，會先把函數先缷載， 把loaded_myscript(是不是要載入腳本)設成true，\nif exists(\u0026#34;loaded_myscript\u0026#34;) delfunction MyglobalfunctionB delfunction MyglobalfunctionCendiflet loaded_myscript=1 7.1.3 Script configuration 腳本的開頭可以放設定，如：顏色，路徑… 或是一些設定使用者已有原本的設定， 可以檢查是否已有原本的設定值，再決定要不要取代原本的設定。\n7.1.4 Key mappings 修改按鍵設定，尋找是否有舊的設定，決定取代、或建立新的設定。\n這邊有些新的代碼：\n hasmapto(): 檢查是否有maping 對映到你的程式 \u0026lt;unique\u0026gt;: 檢查 mapping是否唯一 \u0026lt;Leader\u0026gt;: 前導符號，用來開始一些功能的快速鍵。\u0026lt;Leader\u0026gt; 會被 全域的 Leader 覆蓋 \u0026lt;Plug\u0026gt;: 建立一個全域、唯一的Mapping。 這樣就不會和全域變數中的其他函數衝突  See Also:\n :help \u0026lt;SID\u0026gt;: Script ID ? :help \u0026lt;Plug\u0026gt; :helpscript-local`  7.1.5 Functions s:MyfunctionA : 前綴的 s 把函數的範圍限定在 script 內。\n設定函數的正確的Scope，才不會發現意料之外的問題。\n7.1.6 Putting it all together 完整腳本的例子：\npass\nSee Also:\n :help 'write-filetype-plugin' :help 'write-compiler-plugin' :help 'write-library-script'  7.2 Scripting tips 7.2.1 Gvim or Vim? Gvim 和 vim有不少不同的地方，如何知道目前執行的是哪一個版本？\nif has(\u0026#34;gui_running\u0026#34;) \u0026#34;execute gui-only command here\u0026#34;endif See Also:\n :help 'feature-list  7.2.2 Which operating system? 作業系統間的不同：路徑、檔案存取權限、…\nif has(\u0026#34;win16\u0026#34;) || has(\u0026#34;win32\u0026#34;) || has(\u0026#34;win64\u0026#34;)|| has(\u0026#34;win95\u0026#34;) \u0026#34; do windows things hereelseif has(\u0026#34;unix\u0026#34;) \u0026#34; do linux/unix things here 說明文件內的例子：\n macunix Macintosh version of Vim, using Unix files (OS-X). unix Unix version of Vim. win32 Win32 version of Vim (MS-Windows 95 and later, 32 or 64 bits) win32unix Win32 version of Vim, using Unix files (Cygwin)  See Also:\n :help 'feature-list  7.2.3 Which version of Vim?  Vim版本，ex: Vim 8.0.1626 主版號.副版號.補丁編號\n  if v:version \u0026gt;= 702 || v:version == 701 \u0026amp;\u0026amp; has(\u0026#34;patch123\u0026#34;) \u0026#34; code here is only done for version 7.1 with patch 123 \u0026#34; and version 7.2 and aboveendif :if has(\u0026quot;patch-7.4.123\u0026quot;)\n7.2.4 Printing longer lines 視窗的寬度不少可能超出 80，如果內容太長， 需要函數偵測、防止出錯。\n7.3 Debugging Vim scripts -D : 例如， Vim -D something.txt，可以印出除錯訊息\n:debug 用來除錯的命令。\n基本上就是，設立中錯點、印出數值，除錯。\n7.4 Distributing Vim scripts 依之前的安裝多樣的方式，發布腳本的方向也很多樣。\n7.4.1 Making Vimballs 要確定有安裝 VimBall\n制作Vimball 的命令是:\n:[range]MkVimball filename.vba\n中間填入需要檔案的路徑、其他設定後。\n:MkVimball myscript.vba 打包\n7.5 Remember the documentation Vim說明文件的寫法。\n腳本寫好了以後，好的說明文件也是很重要的一部分。\nVim的說明文件，基本上是普通的 text，加上一些記號\nFirst Line *myscript.txt* Documentation for example script myscript.vim\n文件的第一行，開頭字符號一定要是 \\* ，兩個\\*中間是文件檔名， 後面是文件簡述\n這邊用書上的例子：\n*myscript.txt* Documentation for example script myscript.vimScript : myscript.vim - Example script for vim developersAuthor : Kim SchulzEmail : \u0026lt;kim@schulz.dk\u0026gt;Changed : 01/01/2007============================================================= *myscript-intro*1. OverviewThis document gives a short introduction to the examplescript myscript.vim.This script is made as an example for vim users on how tostructure a simple vim plugin script such that it is easyto read and figure out.The following is covered in this document:1. Overview |myscript-intro|2. Mappings |myscript-mappings|3. Functions |myscript-functions|4. Todo |myscript-todo|=============================================================  首行是特別資訊 檔頭資訊 \\*myscript-intro\\* 是連結目標，可以用 :help 'myscript-intro'跳到這 \\|myscript-intro\\| 建立類似超連結功能，能快速跳到連結目標 \\\u0026gt; Code here\\\u0026lt; 中間的是Code  寫好文件後，執行：\n:helptags docdir\u0026#34; docdir 是指向你的文件 `PLUGIN/doc`  See Also:\n :help 'help-translated'  7.6 Using external interpreters 輸入 :version 和以看到目這的Vim技援的外部功能 像是這些，+lua,+perl,+python,+python3,+ruby,-tcl\n或是輸入指令，是是否有支援。 :echo has(\u0026quot;perl\u0026quot;)\n7.6.1 Vim scripting in Perl pass\n7.6.2 Vim scripting in Python 這邊只看一下比較熟的python。\n單行\n:python3 print(\u0026#34;This is Python3\u0026#34;) 多行\n:python3 \u0026lt;\u0026lt; *endpattern*some statement hereand here*endpattern*\u0026#34; endpattern : 像是 EOF Vim 的的 vim 模組，可以讀取vim的資訊\nimport vimwindow = vim.current.windowwindow.height = 200window.width = 10window.cursor = (1,1) See Also:\n下面的命令可以用來獲取所有的可用函数列表: * :help 'python-vim'\n7.6.3 Vim scripting in Ruby pass\n7.7 小結 Summary pass\nAppendix A Vim的其他功能 Vim game，發 mail,twitter,IRC\u0026hellip;\n或是 設定成 IDE\n:help compiler :help quickfix  參考 http://vim.wikia.com/wiki/Use_Vim_like_an_IDE\nAppendix B Vimrc 設定 Vimrc是 Vim 所有設定存放的檔案，隨著時間 Vimrc可能會變的越來越大，而以維護。\nB.1 保持 Vimrc 簡潔的技巧  :set nocompatible: 把vim設成不相容模式，能開啟比較多的功能。 使用注釋: 使用 \u0026quot; 開頭的注釋，可以讓區段的功能容易了解修改 內容分段: 可以分成 全局、個人、腳本、其他 …有主題性的區段，方便修改。 使用多文件: 可以將部分的內容切出另一個檔案，在本檔內用 source讀進程式 測試時使用另一份vimrc 不同系統使用不定的設定: 像是 .vimrc.linux , _vimrc.win32 , _gvimrc.win32 , \u0026hellip; etc.  B.2 Vimrc的設定系統 Vim Setup system : Vim Setup system - persistent setup directly in vim \n這個plugin讓vim的設定，有選單的可以直接設定，設定完了，再存回 .vimrc\n有GUI來設定，的確是方便了一些。\nB.3 Vimrc雲端儲存 把vim的設定放在網路上，可以方便在多台機器間轉移。\n這邊是用 netrw 來讀寫網路上的設定檔。\n參考連結  Hacking Vim 7.2 by Kim Schulz April 2010 HackingVim72簡中 Vim Tips Wiki  參考書藉\n Learn Vimscript the Hard Way Learn Vimscript the Hard Way_簡中 A Byte of Vim VimSkill "
},
{
	"uri": "/post/golang-intro/",
	"title": "Golang Intro",
	"tags": ["hello", "world"],
	"description": "Thank you for choosing After Dark.",
	"content": "Before you continue, please take a moment to configure your archetypes.\nArchetypes are located in the archetypes directory in the source of your site. To learn more about archetypes, visit Archetypes on the Hugo website. And when you\u0026rsquo;re ready, check out the Customizing section of the After Dark documentation for additional options.\nThis information appears below the Summary Split.\nAfter Dark supports the bpg file format. Here\u0026rsquo;s an example animation rendered using BPG:\nThe above file is 48KB, 97% smaller than the equivalent GIF. Seriously.\nSee the After Dark README for more info.\n"
},
{
	"uri": "/tags/hello/",
	"title": "hello",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/world/",
	"title": "world",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/articles/article-test/",
	"title": "Article Test",
	"tags": ["hello", "world"],
	"description": "Thank you for choosing After Dark.",
	"content": "Article tesete\n"
},
{
	"uri": "/articles/",
	"title": "Articles",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/markdown-syntax-intro/",
	"title": "Markdown Syntax Intro",
	"tags": ["markdown", "syntax"],
	"description": "markdown.tw上的Markdown語法簡要翻譯",
	"content": " Markdown 文件 NOTE: This is Traditional Chinese Edition Document of Markdown Syntax. If you are seeking for English Edition Document. Please refer to Markdown: Syntax.\n Markdown: Syntax  概述  哲學 行內 HTML 特殊字元自動轉換  區塊元素  段落和換行 標題 區塊引言 清單 程式碼區塊 分隔線  區段元素  連結 強調 程式碼 圖片  其它  跳脫字元 自動連結  感謝  注意：這份文件是用 Markdown 寫的，你可以看看它的原始檔 。\n概述 哲學 Markdown 的目標是實現「易讀易寫」。\n不過最需要強調的便是它的可讀性。一份使用 Markdown 格式撰寫的文件應該可以直接以純文字發佈，並且看起來不會像是由許多標籤或是格式指令所構成。Markdown 語法受到一些既有 text-to-HTML 格式的影響，包括 Setext、atx、Textile、reStructuredText、Grutatext 和 EtText，然而最大靈感來源其實是純文字的電子郵件格式。\n因此 Markdown 的語法全由標點符號所組成，並經過嚴謹慎選，是為了讓它們看起來就像所要表達的意思。像是在文字兩旁加上星號，看起來就像*強調*。Markdown 的清單看起來，嗯，就是清單。假如你有使用過電子郵件，區塊引言看起來就真的像是引用一段文字。\n行內 HTML Markdown 的語法有個主要的目的：用來作為一種網路內容的*寫作*用語言。\nMarkdown 不是要來取代 HTML，甚至也沒有要和它相似，它的語法種類不多，只和 HTML 的一部分有關係，重點*不是*要創造一種更容易寫作 HTML 文件的語法，我認為 HTML 已經很容易寫了，Markdown 的重點在於，它能讓文件更容易閱讀、編寫。HTML 是一種*發佈*的格式，Markdown 是一種*編寫*的格式，因此，Markdown 的格式語法只涵蓋純文字可以涵蓋的範圍。\n不在 Markdown 涵蓋範圍之外的標籤，都可以直接在文件裡面用 HTML 撰寫。不需要額外標註這是 HTML 或是 Markdown；只要直接加標籤就可以了。\n只有區塊元素──比如 \u0026lt;div\u0026gt;、\u0026lt;table\u0026gt;、\u0026lt;pre\u0026gt;、\u0026lt;p\u0026gt; 等標籤，必須在前後加上空行，以利與內容區隔。而且這些（元素）的開始與結尾標籤，不可以用 tab 或是空白來縮排。Markdown 的產生器有智慧型判斷，可以避免在區塊標籤前後加上沒有必要的 \u0026lt;p\u0026gt; 標籤。\n舉例來說，在 Markdown 文件裡加上一段 HTML 表格：\nThis is a regular paragraph. \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Foo\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; This is another regular paragraph.  請注意，Markdown 語法在 HTML 區塊標籤中將不會被進行處理。例如，你無法在 HTML 區塊內使用 Markdown 形式的*強調*。\nHTML 的區段標籤如 \u0026lt;span\u0026gt;、\u0026lt;cite\u0026gt;、\u0026lt;del\u0026gt; 則不受限制，可以在 Markdown 的段落、清單或是標題裡任意使用。依照個人習慣，甚至可以不用Markdown 格式，而採用 HTML 標籤來格式化。舉例說明：如果比較喜歡 HTML 的 \u0026lt;a\u0026gt; 或 \u0026lt;img\u0026gt; 標籤，可以直接使用這些標籤，而不用 Markdown 提供的連結或是影像標示語法。\nHTML 區段標籤和區塊標籤不同，在區段標籤的範圍內， Markdown 的語法是有效的。\n特殊字元自動轉換 在 HTML 文件中，有兩個字元需要特殊處理： \u0026lt; 和 \u0026amp; 。 \u0026lt; 符號用於起始標籤，\u0026amp; 符號則用於標記 HTML 實體，如果你只是想要使用這些符號，你必須要使用實體的形式，像是 \u0026amp;lt; 和 \u0026amp;amp;。\n\u0026amp; 符號其實很容易讓寫作網路文件的人感到困擾，如果你要打「AT\u0026amp;T」 ，你必須要寫成「AT\u0026amp;amp;T」 ，還得轉換網址內的 \u0026amp; 符號，如果你要連結到：\nhttp://images.google.com/images?num=30\u0026amp;q=larry+bird  你必須要把網址轉成：\nhttp://images.google.com/images?num=30\u0026amp;amp;q=larry+bird  才能放到連結標籤的 href 屬性裡。不用說也知道這很容易忘記，這也可能是 HTML 標準檢查所檢查到的錯誤中，數量最多的。\nMarkdown 允許你直接使用這些符號，但是你要小心跳脫字元的使用，如果你是在HTML 實體中使用 \u0026amp; 符號的話，它不會被轉換，而在其它情形下，它則會被轉換成 \u0026amp;amp;。所以你如果要在文件中插入一個著作權的符號，你可以這樣寫：\n\u0026amp;copy;  Markdown 將不會對這段文字做修改，但是如果你這樣寫：\nAT\u0026amp;T  Markdown 就會將它轉為：\nAT\u0026amp;amp;T  類似的狀況也會發生在 \u0026lt; 符號上，因為 Markdown 支援 行內 HTML ，如果你是使用 \u0026lt; 符號作為 HTML 標籤使用，那 Markdown 也不會對它做任何轉換，但是如果你是寫：\n4 \u0026lt; 5  Markdown 將會把它轉換為：\n4 \u0026amp;lt; 5  不過需要注意的是，code 範圍內，不論是行內還是區塊， \u0026lt; 和 \u0026amp; 兩個符號都*一定*會被轉換成 HTML 實體，這項特性讓你可以很容易地用 Markdown 寫 HTML code （和 HTML 相對而言， HTML 語法中，你要把所有的 \u0026lt; 和 \u0026amp; 都轉換為 HTML 實體，才能在 HTML 文件裡面寫出 HTML code。）\n區塊元素 段落和換行 一個段落是由一個以上相連接的行句組成，而一個以上的空行則會切分出不同的段落（空行的定義是顯示上看起來像是空行，便會被視為空行。比方說，若某一行只包含空白和 tab，則該行也會被視為空行），一般的段落不需要用空白或斷行縮排。\n「一個以上相連接的行句組成」這句話其實暗示了 Markdown 允許段落內的強迫斷行，這個特性和其他大部分的 text-to-HTML 格式不一樣（包括 MovableType 的「Convert Line Breaks」選項），其它的格式會把每個斷行都轉成 \u0026lt;br /\u0026gt; 標籤。\n如果你*真的*想要插入 \u0026lt;br /\u0026gt; 標籤的話，在行尾加上兩個以上的空白，然後按 enter。\n是的，這確實需要花比較多功夫來插入 \u0026lt;br /\u0026gt; ，但是「每個換行都轉換為 \u0026lt;br /\u0026gt;」的方法在 Markdown 中並不適合， Markdown 中 email 式的 區塊引言 和多段落的 清單 在使用換行來排版的時候，不但更好用，還更好閱讀。\n標題 Markdown 支援兩種標題的語法，Setext 和 atx 形式。\nSetext 形式是用底線的形式，利用 = （最高階標題）和 - （第二階標題），例如：\nThis is an H1 ============= This is an H2 -------------  任何數量的 = 和 - 都可以有效果。\nAtx 形式則是在行首插入 1 到 6 個 # ，對應到標題 1 到 6 階，例如：\n# This is an H1 ## This is an H2 ###### This is an H6  你可以選擇性地「關閉」atx 樣式的標題，這純粹只是美觀用的，若是覺得這樣看起來比較舒適，你就可以在行尾加上 #，而行尾的 # 數量也不用和開頭一樣（行首的井字數量決定標題的階數）：\n# This is an H1 # ## This is an H2 ## ### This is an H3 ######  Blockquotes Markdown 使用 email 形式的區塊引言，如果你很熟悉如何在 email 信件中引言，你就知道怎麼在 Markdown 文件中建立一個區塊引言，那會看起來像是你強迫斷行，然後在每行的最前面加上 \u0026gt; ：\n\u0026gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, \u0026gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. \u0026gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. \u0026gt; \u0026gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse \u0026gt; id sem consectetuer libero luctus adipiscing.  Markdown 也允許你只在整個段落的第一行最前面加上 \u0026gt; ：\n\u0026gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. \u0026gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.  區塊引言可以有階層（例如：引言內的引言），只要根據層數加上不同數量的 \u0026gt; ：\n\u0026gt; This is the first level of quoting. \u0026gt; \u0026gt; \u0026gt; This is nested blockquote. \u0026gt; \u0026gt; Back to the first level.  引言的區塊內也可以使用其他的 Markdown 語法，包括標題、清單、程式碼區塊等：\n\u0026gt; ## This is a header. \u0026gt; \u0026gt; 1. This is the first list item. \u0026gt; 2. This is the second list item. \u0026gt; \u0026gt; Here's some example code: \u0026gt; \u0026gt; return shell_exec(\u0026quot;echo $input | $markdown_script\u0026quot;);  任何標準的文字編輯器都能簡單地建立 email 樣式的引言，例如 BBEdit ，你可以選取文字後然後從選單中選擇*增加引言階層*。\n清單 Markdown 支援有序清單和無序清單。\n無序清單使用星號、加號或是減號作為清單標記：\n* Red * Green * Blue  等同於：\n+ Red + Green + Blue  也等同於：\n- Red - Green - Blue  有序清單則使用數字接著一個英文句點：\n1. Bird 2. McHale 3. Parish  很重要的一點是，你在清單標記上使用的數字並不會影響輸出的 HTML 結果，上面的清單所產生的 HTML 標記為：\n\u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;Bird\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;McHale\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Parish\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt;  如果你的清單標記寫成：\n1. Bird 1. McHale 1. Parish  或甚至是：\n3. Bird 1. McHale 8. Parish  你都會得到完全相同的 HTML 輸出。重點在於，你可以讓 Markdown 文件的清單數字和輸出的結果相同，或是你懶一點，你可以完全不用在意數字的正確性。\n如果你使用懶惰的寫法，建議第一個項目最好還是從 1. 開始，因為 Markdown 未來可能會支援有序清單的 start 屬性。\n清單項目標記通常是放在最左邊，但是其實也可以縮排，最多三個空白，項目標記後面則一定要接著至少一個空白或 tab。\n要讓清單看起來更漂亮，你可以把內容用固定的縮排整理好：\n* Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. * Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.  但是如果你很懶，那也不一定需要：\n* Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. * Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.  如果清單項目間用空行分開， Markdown 會把項目的內容在輸出時用 \u0026lt;p\u0026gt; 標籤包起來，舉例來說：\n* Bird * Magic  會被轉換為：\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Bird\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Magic\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt;  但是這個：\n* Bird * Magic  會被轉換為：\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;p\u0026gt;Bird\u0026lt;/p\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;p\u0026gt;Magic\u0026lt;/p\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt;  清單項目可以包含多個段落，每個項目下的段落都必須縮排 4 個空白或是一個 tab ：\n1. This is a list item with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. 2. Suspendisse id sem consectetuer libero luctus adipiscing.  如果你每行都有縮排，看起來會看好很多，當然，再次地，如果你很懶惰，Markdown 也允許：\n* This is a list item with two paragraphs. This is the second paragraph in the list item. You're only required to indent the first line. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. * Another item in the same list.  如果要在清單項目內放進引言，那 \u0026gt; 就需要縮排：\n* A list item with a blockquote: \u0026gt; This is a blockquote \u0026gt; inside a list item.  如果要放程式碼區塊的話，該區塊就需要縮排*兩次*，也就是 8 個空白或是兩個 tab：\n* A list item with a code block: \u0026lt;code goes here\u0026gt;  當然，項目清單很可能會不小心產生，像是下面這樣的寫法：\n1986. What a great season.  換句話說，也就是在行首出現*數字-句點-空白*，要避免這樣的狀況，你可以在句點前面加上反斜線。\n1986\\. What a great season.  程式碼區塊 和程式相關的寫作或是標籤語言原始碼通常會有已經排版好的程式碼區塊，通常這些區塊我們並不希望它以一般段落文件的方式去排版，而是照原來的樣子顯示，Markdown 會用 \u0026lt;pre\u0026gt; 和 \u0026lt;code\u0026gt; 標籤來把程式碼區塊包起來。\n要在 Markdown 中建立程式碼區塊很簡單，只要簡單地縮排 4 個空白或是 1 個 tab 就可以，例如，下面的輸入：\nThis is a normal paragraph: This is a code block.  Markdown 會轉換成：\n\u0026lt;p\u0026gt;This is a normal paragraph:\u0026lt;/p\u0026gt; \u0026lt;pre\u0026gt;\u0026lt;code\u0026gt;This is a code block. \u0026lt;/code\u0026gt;\u0026lt;/pre\u0026gt;  這個每行一階的縮排（4 個空白或是 1 個 tab），都會被移除，例如：\nHere is an example of AppleScript: tell application \u0026quot;Foo\u0026quot; beep end tell  會被轉換為：\n\u0026lt;p\u0026gt;Here is an example of AppleScript:\u0026lt;/p\u0026gt; \u0026lt;pre\u0026gt;\u0026lt;code\u0026gt;tell application \u0026quot;Foo\u0026quot; beep end tell \u0026lt;/code\u0026gt;\u0026lt;/pre\u0026gt;  一個程式碼區塊會一直持續到沒有縮排的那一行（或是文件結尾）。\n在程式碼區塊裡面， \u0026amp; 、 \u0026lt; 和 \u0026gt; 會自動轉成 HTML 實體，這樣的方式讓你非常容易使用 Markdown 插入範例用的 HTML 原始碼，只需要複製貼上，再加上縮排就可以了，剩下的 Markdown 都會幫你處理，例如：\n \u0026lt;div class=\u0026quot;footer\u0026quot;\u0026gt; \u0026amp;copy; 2004 Foo Corporation \u0026lt;/div\u0026gt;  會被轉換為：\n\u0026lt;pre\u0026gt;\u0026lt;code\u0026gt;\u0026amp;lt;div class=\u0026quot;footer\u0026quot;\u0026amp;gt; \u0026amp;amp;copy; 2004 Foo Corporation \u0026amp;lt;/div\u0026amp;gt; \u0026lt;/code\u0026gt;\u0026lt;/pre\u0026gt;  程式碼區塊中，一般的 Markdown 語法不會被轉換，像是星號便只是星號，這表示你可以很容易地以 Markdown 語法撰寫 Markdown 語法相關的文件。\n分隔線 你可以在一行中用三個或以上的星號、減號、底線來建立一個分隔線，行內不能有其他東西。你也可以在星號中間插入空白。下面每種寫法都可以建立分隔線：\n* * * *** ***** - - - ---------------------------------------  區段元素 連結 Markdown 支援兩種形式的連結語法： *行內*和*參考*兩種形式。\n不管是哪一種，連結的文字都是用 [方括號] 來標記。\n要建立一個行內形式的連結，只要在方塊括號後面馬上接著括號並插入網址連結即可，如果你還想要加上連結的 title 文字，只要在網址後面，用雙引號把 title 文字包起來即可，例如：\nThis is [an example](http://example.com/ \u0026quot;Title\u0026quot;) inline link. [This link](http://example.net/) has no title attribute.  會產生：\n\u0026lt;p\u0026gt;This is \u0026lt;a href=\u0026quot;http://example.com/\u0026quot; title=\u0026quot;Title\u0026quot;\u0026gt; an example\u0026lt;/a\u0026gt; inline link.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;a href=\u0026quot;http://example.net/\u0026quot;\u0026gt;This link\u0026lt;/a\u0026gt; has no title attribute.\u0026lt;/p\u0026gt;  如果你是要連結到同樣主機的資源，你可以使用相對路徑：\nSee my [About](/about/) page for details.  參考形式的連結使用另外一個方括號接在連結文字的括號後面，而在第二個方括號裡面要填入用以辨識連結的標籤：\nThis is [an example][id] reference-style link.  你也可以選擇性地在兩個方括號中間加上空白：\nThis is [an example] [id] reference-style link.  接著，在文件的任意處，你可以把這個標籤的連結內容定義出來：\n[id]: http://example.com/ \u0026quot;Optional Title Here\u0026quot;  連結定義的形式為：\n 方括號，裡面輸入連結的辨識用標籤 接著一個冒號 接著一個以上的空白或 tab 接著連結的網址 選擇性地接著 title 內容，可以用單引號、雙引號或是括弧包著  下面這三種連結的定義都是相同：\n[foo]: http://example.com/ \u0026quot;Optional Title Here\u0026quot; [foo]: http://example.com/ 'Optional Title Here' [foo]: http://example.com/ (Optional Title Here)  請注意：有一個已知的問題是 Markdown.pl 1.0.1 會忽略單引號包起來的連結 title。\n連結網址也可以用方括號包起來：\n[id]: \u0026lt;http://example.com/\u0026gt; \u0026quot;Optional Title Here\u0026quot;  你也可以把 title 屬性放到下一行，也可以加一些縮排，網址太長的話，這樣會比較好看：\n[id]: http://example.com/longish/path/to/resource/here \u0026quot;Optional Title Here\u0026quot;  網址定義只有在產生連結的時候用到，並不會直接出現在文件之中。\n連結辨識標籤可以有字母、數字、空白和標點符號，但是並*不*區分大小寫，因此下面兩個連結是一樣的：\n[link text][a] [link text][A]  *預設的連結標籤*功能讓你可以省略指定連結標籤，這種情形下，連結標籤和連結文字會視為相同，要用預設連結標籤只要在連結文字後面加上一個空的方括號，如果你要讓 \u0026ldquo;Google\u0026rdquo; 連結到 google.com，你可以簡化成：\n[Google][]  然後定義連結內容：\n[Google]: http://google.com/  由於連結文字可能包含空白，所以這種簡化的標籤內也可以包含多個文字：\nVisit [Daring Fireball][] for more information.  然後接著定義連結：\n[Daring Fireball]: http://daringfireball.net/  連結的定義可以放在文件中的任何一個地方，我比較偏好直接放在連結出現段落的後面，你也可以把它放在文件最後面，就像是註解一樣。\n下面是一個參考式連結的範例：\nI get 10 times more traffic from [Google] [1] than from [Yahoo] [2] or [MSN] [3]. [1]: http://google.com/ \u0026quot;Google\u0026quot; [2]: http://search.yahoo.com/ \u0026quot;Yahoo Search\u0026quot; [3]: http://search.msn.com/ \u0026quot;MSN Search\u0026quot;  如果改成用連結名稱的方式寫：\nI get 10 times more traffic from [Google][] than from [Yahoo][] or [MSN][]. [google]: http://google.com/ \u0026quot;Google\u0026quot; [yahoo]: http://search.yahoo.com/ \u0026quot;Yahoo Search\u0026quot; [msn]: http://search.msn.com/ \u0026quot;MSN Search\u0026quot;  上面兩種寫法都會產生下面的 HTML。\n\u0026lt;p\u0026gt;I get 10 times more traffic from \u0026lt;a href=\u0026quot;http://google.com/\u0026quot; title=\u0026quot;Google\u0026quot;\u0026gt;Google\u0026lt;/a\u0026gt; than from \u0026lt;a href=\u0026quot;http://search.yahoo.com/\u0026quot; title=\u0026quot;Yahoo Search\u0026quot;\u0026gt;Yahoo\u0026lt;/a\u0026gt; or \u0026lt;a href=\u0026quot;http://search.msn.com/\u0026quot; title=\u0026quot;MSN Search\u0026quot;\u0026gt;MSN\u0026lt;/a\u0026gt;.\u0026lt;/p\u0026gt;  下面是用行內形式寫的同樣一段內容的 Markdown 文件，提供作為比較之用：\nI get 10 times more traffic from [Google](http://google.com/ \u0026quot;Google\u0026quot;) than from [Yahoo](http://search.yahoo.com/ \u0026quot;Yahoo Search\u0026quot;) or [MSN](http://search.msn.com/ \u0026quot;MSN Search\u0026quot;).  參考式的連結其實重點不在於它比較好寫，而是它比較好讀，比較一下上面的範例，使用參考式的文章本身只有 81 個字元，但是用行內形式的連結卻會增加到 176 個字元，如果是用純 HTML 格式來寫，會有 234 個字元，在 HTML 格式中，標籤比文字還要多。\n使用 Markdown 的參考式連結，可以讓文件更像是瀏覽器最後產生的結果，讓你可以把一些標記相關的資訊移到段落文字之外，你就可以增加連結而不讓文章的閱讀感覺被打斷。\n強調 Markdown 使用星號（*）和底線（_）作為標記強調字詞的符號，被 * 或 _ 包圍的字詞會被轉成用 \u0026lt;em\u0026gt; 標籤包圍，用兩個 * 或 _ 包起來的話，則會被轉成 \u0026lt;strong\u0026gt;，例如：\n*single asterisks* _single underscores_ **double asterisks** __double underscores__  會轉成：\n\u0026lt;em\u0026gt;single asterisks\u0026lt;/em\u0026gt; \u0026lt;em\u0026gt;single underscores\u0026lt;/em\u0026gt; \u0026lt;strong\u0026gt;double asterisks\u0026lt;/strong\u0026gt; \u0026lt;strong\u0026gt;double underscores\u0026lt;/strong\u0026gt;  你可以隨便用你喜歡的樣式，唯一的限制是，你用什麼符號開啟標籤，就要用什麼符號結束。\n強調也可以直接插在文字中間：\nun*frigging*believable  但是如果你的 * 和 _ 兩邊都有空白的話，它們就只會被當成普通的符號。\n如果要在文字前後直接插入普通的星號或底線，你可以用反斜線：\n\\*this text is surrounded by literal asterisks\\*  程式碼 如果要標記一小段行內程式碼，你可以用反引號把它包起來（`），例如：\nUse the `printf()` function.  會產生：\n\u0026lt;p\u0026gt;Use the \u0026lt;code\u0026gt;printf()\u0026lt;/code\u0026gt; function.\u0026lt;/p\u0026gt;  如果要在程式碼區段內插入反引號，你可以用多個反引號來開啟和結束程式碼區段：\n``There is a literal backtick (`) here.``  這段語法會產生：\n\u0026lt;p\u0026gt;\u0026lt;code\u0026gt;There is a literal backtick (`) here.\u0026lt;/code\u0026gt;\u0026lt;/p\u0026gt;  程式碼區段的起始和結束端都可以放入一個空白，起始端後面一個，結束端前面一個，這樣你就可以在區段的一開始就插入反引號：\nA single backtick in a code span: `` ` `` A backtick-delimited string in a code span: `` `foo` ``  會產生：\n\u0026lt;p\u0026gt;A single backtick in a code span: \u0026lt;code\u0026gt;`\u0026lt;/code\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;A backtick-delimited string in a code span: \u0026lt;code\u0026gt;`foo`\u0026lt;/code\u0026gt;\u0026lt;/p\u0026gt;  在程式碼區段內，\u0026amp; 和方括號都會被轉成 HTML 實體，這樣會比較容易插入 HTML 原始碼，Markdown 會把下面這段：\nPlease don't use any `\u0026lt;blink\u0026gt;` tags.  轉為：\n\u0026lt;p\u0026gt;Please don't use any \u0026lt;code\u0026gt;\u0026amp;lt;blink\u0026amp;gt;\u0026lt;/code\u0026gt; tags.\u0026lt;/p\u0026gt;  你也可以這樣寫：\n`\u0026amp;#8212;` is the decimal-encoded equivalent of `\u0026amp;mdash;`.  以產生：\n\u0026lt;p\u0026gt;\u0026lt;code\u0026gt;\u0026amp;amp;#8212;\u0026lt;/code\u0026gt; is the decimal-encoded equivalent of \u0026lt;code\u0026gt;\u0026amp;amp;mdash;\u0026lt;/code\u0026gt;.\u0026lt;/p\u0026gt;  圖片 很明顯地，要在純文字應用中設計一個 「自然」的語法來插入圖片是有一定難度的。\nMarkdown 使用一種和連結很相似的語法來標記圖片，同樣也允許兩種樣式： *行內*和*參考*。\n行內圖片的語法看起來像是：\n![Alt text](/path/to/img.jpg) ![Alt text](/path/to/img.jpg \u0026quot;Optional title\u0026quot;)  詳細敘述如下：\n 一個驚嘆號 ! 接著一對方括號，裡面放上圖片的替代文字 接著一對普通括號，裡面放上圖片的網址，最後還可以用引號包住並加上 選擇性的 \u0026lsquo;title\u0026rsquo; 文字。  參考式的圖片語法則長得像這樣：\n![Alt text][id]  「id」是圖片參考的名稱，圖片參考的定義方式則和連結參考一樣：\n[id]: url/to/image \u0026quot;Optional title attribute\u0026quot;  到目前為止， Markdown 還沒有辦法指定圖片的寬高，如果你需要的話，你可以使用普通的 \u0026lt;img\u0026gt; 標籤。\n其它 自動連結 Markdown 支援比較簡短的自動連結形式來處理網址和電子郵件信箱，只要是用方括號包起來， Markdown 就會自動把它轉成連結，連結的文字就和連結位置一樣，例如：\n\u0026lt;http://example.com/\u0026gt;  Markdown 會轉為：\n\u0026lt;a href=\u0026quot;http://example.com/\u0026quot;\u0026gt;http://example.com/\u0026lt;/a\u0026gt;  自動的郵件連結也很類似，只是 Markdown 會先做一個編碼轉換的過程，把文字字元轉成 16 進位碼的 HTML 實體，這樣的格式可以混淆一些不好的信箱地址收集機器人，例如：\n\u0026lt;address@example.com\u0026gt;  Markdown 會轉成：\n\u0026lt;a href=\u0026quot;\u0026amp;#x6D;\u0026amp;#x61;i\u0026amp;#x6C;\u0026amp;#x74;\u0026amp;#x6F;:\u0026amp;#x61;\u0026amp;#x64;\u0026amp;#x64;\u0026amp;#x72;\u0026amp;#x65; \u0026amp;#115;\u0026amp;#115;\u0026amp;#64;\u0026amp;#101;\u0026amp;#120;\u0026amp;#x61;\u0026amp;#109;\u0026amp;#x70;\u0026amp;#x6C;e\u0026amp;#x2E;\u0026amp;#99;\u0026amp;#111; \u0026amp;#109;\u0026quot;\u0026gt;\u0026amp;#x61;\u0026amp;#x64;\u0026amp;#x64;\u0026amp;#x72;\u0026amp;#x65;\u0026amp;#115;\u0026amp;#115;\u0026amp;#64;\u0026amp;#101;\u0026amp;#120;\u0026amp;#x61; \u0026amp;#109;\u0026amp;#x70;\u0026amp;#x6C;e\u0026amp;#x2E;\u0026amp;#99;\u0026amp;#111;\u0026amp;#109;\u0026lt;/a\u0026gt;  在瀏覽器裡面，這段字串會變成一個可以點擊的「address@example.com」連結。\n（這種作法雖然可以混淆不少的機器人，但並無法全部擋下來，不過這樣也比什麼都不做好些。無論如何，公開你的信箱終究會引來廣告信件的。）\n跳脫字元 Markdown 可以利用反斜線來插入一些在語法中有其它意義的符號，例如：如果你想要用星號加在文字旁邊的方式來做出強調效果（但不用 \u0026lt;em\u0026gt; 標籤），你可以在星號的前面加上反斜線：\n\\*literal asterisks\\*  Markdown 支援在下面這些符號前面加上反斜線來幫助插入普通的符號：\n\\ 反斜線 ` 反引號 * 星號 _ 底線 {} 大括號 [] 方括號 () 括號 # 井字號 + 加號 - 減號 . 英文句點 ! 驚嘆號  感謝 感謝 leafy7382 協助翻譯，hlb、Randylien 幫忙潤稿，ethantw 的漢字標準格式・CSS Reset， WM 回報文字錯誤。\n"
},
{
	"uri": "/tags/syntax/",
	"title": "syntax",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/install-hugo/",
	"title": "Install Hugo",
	"tags": ["hugo", "blog"],
	"description": "Install Hugo first time",
	"content": "之前有用過 Pelican + Restructured Text，考慮過 Hugo, Hexo, Nikola後， 決定試試Hugo。 Hugo的速度、方便性來說算是滿不錯，而且在 github上追蹤的人數也滿多的，就試 試，順便試一下golang。\n概述 Hugo的優點大概有：\n 生成速度快 安裝方便 使用的人數不少  不過最主要還是速度的問題，順便試一下golang\n安裝 安裝的文件，參考Hugo官方的文件\n這邊的例子是在打算在Windows10上安裝，所以先用 Chocolatey 這個類似apt的工具來安裝 golang，另外直接用 Chocolatey來安裝 Hugo，另外在Windows上的終端機程式也可以改用 Cmder\n1\tchoco install golang\r2\tchoco install hugo\r3\tchoco install cmder 基本用法 產生新的hugo目錄\n$hugo new site quickstart $tree . └── quickstart ├── archetypes ├── config.toml ├── content ├── data ├── layouts └── static  安裝新的theme\ncd quickstart git init git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke # Edit your config.toml configuration file # and add the Ananke theme. echo 'theme = \u0026quot;ananke\u0026quot;' \u0026gt;\u0026gt; config.toml  基本上就是把theme的目錄放到 themes\\ 下，然後在 quickstart\\confit.toml下 設定 theme = \\\u0026quot;ananke\\\u0026quot;\n新增新文章\nhugo new posts/my-first-post.md  編輯完新文章後，\n▶ hugo server -D Started building sites ... Built site for language en: 1 of 1 draft rendered 0 future content 0 expired content 1 regular pages created 8 other pages created 0 non-page files copied 1 paginator pages created 0 categories created 0 tags created total in 18 ms Watching for changes in /Users/bep/sites/quickstart/{data,content,layouts,static,themes} Serving pages from memory Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop  可以在 http://localhost:1313/ 下面看到文章\nconfig.toml設定檔裡有很多東西還需要調整，看不同的 theme， 設定可能也會不同。\nHugo Help指令\nhugo help  直接在 hugo文件目錄下執行 hugo，會生成 html到 \\public\\ 的預設目錄下。\nMarkdown Markdown的文件寫法，和 Restructured Text類似，不過 Rst在python社群中較多人 使用，而Markdown使用的社群比較多。語法的話，可以參考 Markdown語法\n其他 目前用的theme\n http://themes.gohugo.io/after-dark/ https://github.com/comfusion/after-dark  Shortcodes\nhttps://gohugo.io/content-management/shortcodes/\n程式碼語法 highlight\nhttps://gohugo.io/tools/syntax-highlighting/#pygments\n參考連結  用 Hugo 搭建个人 Blog 使用Hugo搭建静态站点 Hugo 中文 "
},
{
	"uri": "/post/this-is-new-blog-post/",
	"title": "This Is New Blog Post",
	"tags": ["python", "blog", "golang", "hugo"],
	"description": "",
	"content": "鳳山房價較高雄市中心便宜，吸引首購自住客前往置產，成為今年高雄上半年不動產交易 量最多的行政區，而交易主力在總價500～700萬外加車位的20年以上透天。 鳳山生活機能完善，房價較高雄市中心便宜，吸引首購族置產\n鳳山生活圈鄰近鳳山捷運站及鳳山火車站，具備雙鐵優勢，加上距國道1號約10分鐘車程 ，交通便利，且商圈林立，吸引家樂福、迪卡儂等大型賣場進駐，區域內還有大東文化藝 術中心、大東濕地公園等公共建設，近期鳳山體育館也規劃將改建成運動中心，生活機能 十分豐富。\nprint(\u0026#34;hello,world!\u0026#34;) print()\n1var a string\r2var b string\r3var c string\r4var d string \u0026lt;section id=\u0026#34;main\u0026#34;\u0026gt;\r\u0026lt;div\u0026gt;\r\u0026lt;h1 id=\u0026#34;title\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r{{ range .Data.Pages }}\r{{ .Render \u0026#34;summary\u0026#34;}}\r{{ end }}\r\u0026lt;/div\u0026gt;\r\u0026lt;/section\u0026gt; "
},
{
	"uri": "/tags/golang/",
	"title": "golang",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/my-first-post/",
	"title": "My First Post",
	"tags": [],
	"description": "",
	"content": "  I think , therefore I am. Cogito ergo sum by René Descartes\n H1 中文測試\nH2 中文測試中文測試 中文測試中文測試中文測試中文測試\nH3 中文測試中文測試中文測試中文測試中文測試中文測試\nH4 中文測試中文測試中文測試中文測試中文測試中文測試中文測試中文測試中文測試\nH5 中文測試中文測試中文測試中文測試\n中文測試\n作者 wowqweasd (竹葉青加冰，正點) 看板 Gossiping 標題 [新聞] 柯P缺席警察局長交接 北市府幕僚：無聲 時間 Thu Sep 21 15:35:03 2017 ───────────────────────────────────────\n柯P缺席警察局長交接 北市府幕僚：無聲抗議\n自由時報\nhttp://news.ltn.com.tw/news/politics/breakingnews/2200209\nhttp://img.ltn.com.tw/Upload/liveNews/BigPic/600_php014Tpo.jpg\n台北市副市長鄧家基今天（21日）主持警察局長交接典禮，左起副局長林順家、警政署長 陳家欽、副市長鄧家基、新任警察局長陳嘉昌。（記者方賓照攝）\n2017-09-21 13:56 〔記者郭安家／台北報導〕台北市警察局長邱豐光被拔為警政署副署長，台北市長柯文哲 原定今上午要出席新任台北市警察局長陳嘉昌交接儀式，但柯昨晚決定缺席、今早由副市 長鄧家基代為出席。北市府發言人劉奕霆表示，柯文哲缺席「沒有理由」，其餘不再回應 。但有市府幕僚私下解讀，柯文哲在做無聲抗議。\n柯文哲昨於議會備詢，國民黨台北市議員紛紛建議，柯應效法前台北縣長周錫瑋當年拒絕\n"
},
{
	"uri": "/post/what-is-hugo/",
	"title": "What is Hugo?",
	"tags": [],
	"description": "",
	"content": " Hugo is a general-purpose website framework. Technically speaking, Hugo is a static site generator. Unlike other systems which dynamically build a page every time a visitor requests one, Hugo does the building when you create your content. Since websites are viewed far more often than they are edited, Hugo is optimized for website viewing while providing a great writing experience.\nSites built with Hugo are extremely fast and very secure. Hugo sites can be hosted anywhere, including Appernetic, Heroku, GoDaddy, DreamHost, GitHub Pages, Surge, Aerobatic, Google Cloud Storage, Amazon S3 and CloudFront, and work well with CDNs. Hugo sites run without dependencies on expensive runtimes like Ruby, Python or PHP and without dependencies on any databases.\nWe think of Hugo as the ideal website creation tool. With nearly instant build times and the ability to rebuild whenever a change is made, Hugo provides a very fast feedback loop. This is essential when you are designing websites, but also very useful when creating content.\nWhat makes Hugo different? Web site generators render content into HTML files. Most are \u0026ldquo;dynamic site generators.\u0026rdquo; That means the HTTP server (which is the program running on your website that the user\u0026rsquo;s browser talks to) runs the generator to create a new HTML file each and every time a user wants to view a page.\nCreating the page dynamically means that the computer hosting the HTTP server has to have enough memory and CPU to effectively run the generator around the clock. If not, then the user has to wait in a queue for the page to be generated.\nNobody wants users to wait longer than needed, so the dynamic site generators programmed their systems to cache the HTML files. When a file is cached, a copy of it is temporarily stored on the computer. It is much faster for the HTTP server to send that copy the next time the page is requested than it is to generate it from scratch.\nHugo takes caching a step further. All HTML files are rendered on your computer. You can review the files before you copy them to the computer hosting the HTTP server. Since the HTML files aren\u0026rsquo;t generated dynamically, we say that Hugo is a \u0026ldquo;static site generator.\u0026rdquo;\nNot running a web site generator on your HTTP server has many benefits. The most noticeable is performance - HTTP servers are very good at sending files. So good that you can effectively serve the same number of pages with a fraction of the memory and CPU needed for a dynamic site.\nHugo has two components to help you build and test your web site. The one that you\u0026rsquo;ll probably use most often is the built-in HTTP server. When you run hugo server, Hugo renders all of your content into HTML files and then runs an HTTP server on your computer so that you can see what the pages look like.\nThe second component is used when you\u0026rsquo;re ready to publish your web site to the computer running your website. Running Hugo without any actions will rebuild your entire web site using the baseurl setting from your site\u0026rsquo;s configuration file. That\u0026rsquo;s required to have your page links work properly with most hosting companies.\nHow fast is Hugo?   What does Hugo do? In technical terms, Hugo takes a source directory of files and templates and uses these as input to create a complete website.\nHugo boasts the following features:\nGeneral  Extremely fast build times (~1 ms per page) Completely cross platform: Runs on \u0026nbsp;Mac OS\u0026nbsp;X, \u0026nbsp;Linux, \u0026nbsp;Windows, and more! Easy installation Render changes on the fly with LiveReload as you develop Complete theme support Host your site anywhere  Organization  Straightforward organization Support for website sections Completely customizable URLs Support for configurable taxonomies which includes categories and tags. Create your own custom organization of content Ability to sort content as you desire Automatic table of contents generation Dynamic menu creation Pretty URLs support Permalink pattern support Aliases (redirects)  Content  Native support for content written in Markdown  Support for other languages through external helpers, see supported formats  Support for TOML, YAML and JSON metadata in frontmatter Completely customizable homepage Support for multiple content types Automatic and user defined summaries Shortcodes to enable rich content inside of Markdown \u0026ldquo;Minutes to Read\u0026rdquo; functionality \u0026ldquo;Wordcount\u0026rdquo; functionality  Additional Features  Integrated Disqus comment support Integrated Google Analytics support Automatic RSS creation Support for Go, Amber and Ace HTML templates Syntax highlighting powered by Pygments  See what\u0026rsquo;s coming next in the roadmap.\nWho should use Hugo? Hugo is for people that prefer writing in a text editor over a browser.\nHugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.\nHugo is for people building a blog, company site, portfolio, tumblog, documentation, single page site or a site with thousands of pages.\nWhy did you write Hugo? I wrote Hugo ultimately for a few reasons. First, I was disappointed with WordPress, my then website solution. It rendered slowly. I couldn\u0026rsquo;t create content as efficiently as I wanted to and needed to be online to write posts. The constant security updates and the horror stories of people\u0026rsquo;s hacked blogs. I hated how content was written in HTML instead of the much simpler Markdown. Overall, I felt like it got in my way more than it helped me from writing great content.\nI looked at existing static site generators like Jekyll, Middleman and nanoc. All had complicated dependencies to install and took far longer to render my blog with hundreds of posts than I felt was acceptable. I wanted a framework to be able to get rapid feedback while making changes to the templates, and the 5+-minute render times was just too slow. In general, they were also very blog minded and didn\u0026rsquo;t have the ability to have different content types and flexible URLs.\nI wanted to develop a fast and full-featured website framework without dependencies. The Go language seemed to have all of the features I needed in a language. I began developing Hugo in Go and fell in love with the language. I hope you will enjoy using (and contributing to) Hugo as much as I have writing it.\n"
},
{
	"uri": "/post/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " Hugo is written in Go with support for multiple platforms.\nThe latest release can be found at Hugo Releases. We currently provide pre-built binaries for \u0026nbsp;Windows, \u0026nbsp;Linux, \u0026nbsp;FreeBSD and \u0026nbsp;OS\u0026nbsp;X (Darwin) for x64, i386 and ARM architectures.\nHugo may also be compiled from source wherever the Go compiler tool chain can run, e.g. for other operating systems including DragonFly BSD, OpenBSD, Plan\u0026nbsp;9 and Solaris. See http://golang.org/doc/install/source for the full set of supported combinations of target operating systems and compilation architectures.\nInstalling Hugo (binary) Installation is very easy. Simply download the appropriate version for your platform from Hugo Releases. Once downloaded it can be run from anywhere. You don\u0026rsquo;t need to install it into a global location. This works well for shared hosts and other systems where you don\u0026rsquo;t have a privileged account.\nIdeally, you should install it somewhere in your PATH for easy use. /usr/local/bin is the most probable location.\nOn OS\u0026nbsp;X, if you have Homebrew, installation is even easier: just run brew update \u0026amp;\u0026amp; brew install hugo.\nInstalling Pygments (optional) The Hugo executable has one optional external dependency for source code highlighting (Pygments).\nIf you want to have source code highlighting using the highlight shortcode, you need to install the Python-based Pygments program. The procedure is outlined on the Pygments home page.\nUpgrading Hugo Upgrading Hugo is as easy as downloading and replacing the executable you’ve placed in your PATH.\nInstalling from source Prerequisite tools for downloading and building source code  Git Go 1.5+  Get directly from GitHub $ export GOPATH=$HOME/go $ go get -v github.com/spf13/hugo  go get will then fetch Hugo and all its dependent libraries to your $GOPATH/src directory, and compile everything into the final hugo (or hugo.exe) executable, which you will find sitting in the $GOPATH/bin/ directory, all ready to go!\nYou may run go get with the -u option to update Hugo\u0026rsquo;s dependencies:\n$ go get -u -v github.com/spf13/hugo  Contributing Please see the contributing guide.\n"
},
{
	"uri": "/post/creating-a-new-theme/",
	"title": "Creating a New Theme",
	"tags": [],
	"description": "",
	"content": " Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026rsquo;t cover using CSS to style your theme.\nWe\u0026rsquo;ll start with creating a new site with a very basic template. Then we\u0026rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I\u0026rsquo;ve added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere\u0026rsquo;s an example:\n## this is a comment $ echo this is a command this is a command ## edit the file $vi foo.md +++ date = \u0026quot;2014-09-28\u0026quot; title = \u0026quot;creating a new theme\u0026quot; +++ bah and humbug :wq ## show it $ cat foo.md +++ date = \u0026quot;2014-09-28\u0026quot; title = \u0026quot;creating a new theme\u0026quot; +++ bah and humbug $  Some Definitions There are a few concepts that you need to understand before creating a theme.\nSkins Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it\u0026rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site Let\u0026rsquo;s use Hugo to create a new web site. I\u0026rsquo;m a Mac user, so I\u0026rsquo;ll create mine in my home directory, in the Sites folder. If you\u0026rsquo;re using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta $ cd ~/Sites/zafta $ ls -l total 8 drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 . drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 .. drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $  Take a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That\u0026rsquo;s a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that\u0026rsquo;s everything that\u0026rsquo;s not content). Since we have an empty site, it won\u0026rsquo;t do much, but it will do it very quickly.\n$ hugo --verbose INFO: 2014/09/29 Using config file: config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $  The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We\u0026rsquo;ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $  See that new public/ directory? Hugo placed all generated content there. When you\u0026rsquo;re ready to publish your web site, that\u0026rsquo;s the place to start. For now, though, let\u0026rsquo;s just confirm that we have what we\u0026rsquo;d expect from a site with no content.\n$ ls -l public total 16 -rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml -rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml $  Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop  Connect to the listed URL (it\u0026rsquo;s on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml sitemap.xml  That\u0026rsquo;s a listing of your public/ directory. Hugo didn\u0026rsquo;t create a home page because our site has no content. When there\u0026rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html]  That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it\u0026rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we\u0026rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn\u0026rsquo;t find a template for the home page and it told you so.\nAt this point, you\u0026rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme Hugo doesn\u0026rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe\u0026rsquo;re going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton Use the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta $ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes $ find themes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html -rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml $  The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They\u0026rsquo;re optional, but if you\u0026rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It\u0026rsquo;s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml author = \u0026quot;michael d henderson\u0026quot; description = \u0026quot;a minimal working template\u0026quot; license = \u0026quot;MIT\u0026quot; name = \u0026quot;zafta\u0026quot; source_repo = \u0026quot;\u0026quot; tags = [\u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot;] :wq ## also edit themes/zafta/LICENSE.md and change ## the bit that says \u0026quot;YOUR_NAME_HERE\u0026quot;  Note that the the skeleton\u0026rsquo;s template files are empty. Don\u0026rsquo;t worry, we\u0026rsquo;ll be changing that shortly.\n$ find themes/zafta -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html $  Update the Configuration File to Use the Theme Now that we\u0026rsquo;ve got a theme to work with, it\u0026rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don\u0026rsquo;t put it in the configuration file or specify it on the command line, you won\u0026rsquo;t use the template that you\u0026rsquo;re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml theme = \u0026quot;zafta\u0026quot; baseurl = \u0026quot;\u0026quot; languageCode = \u0026quot;en-us\u0026quot; title = \u0026quot;zafta - totally refreshing\u0026quot; MetaDataFormat = \u0026quot;toml\u0026quot; :wq $  Generate the Site Now that we have an empty theme, let\u0026rsquo;s generate the site again.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $  Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme\u0026rsquo;s directory.\nLet\u0026rsquo;s check the public/ directory to see what Hugo\u0026rsquo;s created.\n$ ls -l public total 16 drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css -rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html -rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js -rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml $  Notice four things:\n Hugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn\u0026rsquo;t create any pages. That\u0026rsquo;s because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn\u0026rsquo;t count things like the index.html files that it creates automatically.  The Home Page Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo\u0026rsquo;s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]  If it can\u0026rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html $  The Magic of Static Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo\u0026rsquo;s opinion is that you\u0026rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don\u0026rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo\u0026rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js $  The Theme Development Cycle When you\u0026rsquo;re working on a theme, you will make changes in the theme\u0026rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\n Purge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4.  I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you\u0026rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo\u0026rsquo;s Watch Option Hugo\u0026rsquo;s \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload Hugo\u0026rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that\u0026rsquo;s totally amazing.\u0026rdquo;\nDevelopment Commands Use the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory. ## $ rm -rf public ## ## run hugo in watch mode ## $ hugo server --watch --verbose  Here\u0026rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I\u0026rsquo;ve said this before, it\u0026rsquo;s amazing.\n$ rm -rf public $ hugo server --watch --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Watching for changes in /Users/quoha/Sites/zafta/content Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop INFO: 2014/09/29 File System Event: [\u0026quot;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026quot;: MODIFY|ATTRIB] Change detected, rebuilding site WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 1 ms  Update the Home Page Template The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme\u0026rsquo;s layout/ directory:\n index.html _default/list.html _default/single.html  We could update one of the default templates, but a good design decision is to update the most specific template available. That\u0026rsquo;s not a hard and fast rule (in fact, we\u0026rsquo;ll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page Right now, that page is empty because we don\u0026rsquo;t have any content and we don\u0026rsquo;t have any logic in the template. Let\u0026rsquo;s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $  Build the web site and then verify the results.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt;  Live Reload Note: If you\u0026rsquo;re running the server with the --watch option, you\u0026rsquo;ll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write('\u0026lt;script src=\u0026quot;http://' + (location.host || 'localhost').split(':')[0] + ':1313/livereload.js?mindelay=10\u0026quot;\u0026gt;\u0026lt;/' + 'script\u0026gt;')\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  When you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page \u0026ldquo;Dynamic home page?\u0026rdquo; Hugo\u0026rsquo;s a static web site generator, so this seems an odd thing to say. I mean let\u0026rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We\u0026rsquo;ll use iteration in the template to do that.\nCreate New Posts Now that we have the home page generating static content, let\u0026rsquo;s add some content to the site. We\u0026rsquo;ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md ERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{} $  That wasn\u0026rsquo;t very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there\u0026rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md +++ Description = \u0026quot;\u0026quot; Tags = [] Categories = [] +++ :wq $ find themes/zafta/archetypes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md $ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md /Users/quoha/Sites/zafta/content/post/first.md created $ hugo --verbose new post/second.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/second.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md /Users/quoha/Sites/zafta/content/post/second.md created $ ls -l content/post total 16 -rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md -rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md $ cat content/post/first.md +++ Categories = [] Description = \u0026quot;\u0026quot; Tags = [] date = \u0026quot;2014-09-29T21:54:53-05:00\u0026quot; title = \u0026quot;first\u0026quot; +++ my first post $ cat content/post/second.md +++ Categories = [] Description = \u0026quot;\u0026quot; Tags = [] date = \u0026quot;2014-09-29T21:57:09-05:00\u0026quot; title = \u0026quot;second\u0026quot; +++ my second post $  Build the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;, \u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $  The output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html $  The new files are empty because because the templates used to generate the content are empty. The homepage doesn\u0026rsquo;t show the new content, either. We have to update the templates to add the posts.\nList and Single Templates In Hugo, we have three major kinds of templates. There\u0026rsquo;s the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage The home page will contain a list of posts. Let\u0026rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $  Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026rdquo;. In our template, the commands are:\n range .Title end  The \u0026ldquo;range\u0026rdquo; command is an iterator. We\u0026rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt\u0026rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $  Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let\u0026rsquo;s take a moment to appreciate what we\u0026rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you\u0026rsquo;ve learned everything you need to know to build a theme. All that\u0026rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don\u0026rsquo;t worry, though, that\u0026rsquo;s all to come.\nAdd Content to the Posts We\u0026rsquo;re working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don\u0026rsquo;t do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can\u0026rsquo;t find one, then it will look in the _default/ directory. There are some twists that we\u0026rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let\u0026rsquo;s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l -rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html  We could create a new template, post/single.html, or change the default. Since we don\u0026rsquo;t know of any other content types, let\u0026rsquo;s start with updating the default.\nRemember, any content that we haven\u0026rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we\u0026rsquo;re going to be adding different types of content and we\u0026rsquo;re going to end up undoing some of the changes we\u0026rsquo;ve made. It\u0026rsquo;s good because we\u0026rsquo;ll be able to see immediate results. It\u0026rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we\u0026rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we\u0026rsquo;ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you\u0026rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That\u0026rsquo;s a refreshing amount of joy right there.\nUpdate the Template File $ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $  Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html $ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $  Notice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content The posts are on the home page. Let\u0026rsquo;s add a link from there to the post. Since this is the home page, we\u0026rsquo;ll update its template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;/post/second/\u0026quot;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;/post/first/\u0026quot;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $  Create a Post Listing We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let\u0026rsquo;s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let\u0026rsquo;s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html  As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don\u0026rsquo;t have multiple content types, so let\u0026rsquo;s stay consistent and update the default list template.\nCreating Top Level Pages Let\u0026rsquo;s add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let\u0026rsquo;s verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++ title = \u0026quot;about\u0026quot; description = \u0026quot;about this site\u0026quot; date = \u0026quot;2014-09-27\u0026quot; slug = \u0026quot;about time\u0026quot; +++ ## about us i'm speechless :wq  Generate the web site and verify the results.\n$ find public -name '*.html' | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html  Notice that the page wasn\u0026rsquo;t created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/\u0026rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It\u0026rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/theme/\u0026quot;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/about-time/\u0026quot;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/second-post/\u0026quot;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/first-post/\u0026quot;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt;document.write('\u0026lt;script src=\u0026quot;http://' + (location.host || 'localhost').split(':')[0] + ':1313/livereload.js?mindelay=10\u0026quot;\u0026gt;\u0026lt;/' + 'script\u0026gt;')\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Notice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That\u0026rsquo;s not desirable, so let\u0026rsquo;s change that first.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026quot;post\u0026quot;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if eq .Type \u0026quot;page\u0026quot; }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq  Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name '*.html' | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html  Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let\u0026rsquo;s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml [permalinks] page = \u0026quot;/:title/\u0026quot; about = \u0026quot;/:filename/\u0026quot;  Generate the web site and verify that this didn\u0026rsquo;t work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates If you\u0026rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn\u0026rsquo;t. That\u0026rsquo;s because we didn\u0026rsquo;t put the title in the home page\u0026rsquo;s template (layouts/index.html). That\u0026rsquo;s an easy thing to do, but let\u0026rsquo;s look at a different option.\nWe can put the common bits into a shared template that\u0026rsquo;s stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme\u0026rsquo;s presentation.\n$ vi themes/zafta/layouts/partials/header.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; :wq $ vi themes/zafta/layouts/partials/footer.html \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq  Update the Home Page Template to Use the Partials The most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026quot;theme/partials/header.html\u0026quot; . }}  versus\n{{ partial \u0026quot;header.html\u0026quot; . }}  Both pass in the context.\nLet\u0026rsquo;s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026quot;post\u0026quot;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if or (eq .Type \u0026quot;page\u0026quot;) (eq .Type \u0026quot;about\u0026quot;) }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq  Generate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq  Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts It\u0026rsquo;s common to have posts display the date that they were written or published, so let\u0026rsquo;s add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It\u0026rsquo;s usually the date the content was created, but let\u0026rsquo;s pretend that\u0026rsquo;s the value we want to display.\nAdd “Date Published” to the Template We\u0026rsquo;ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}  Posts use the default single template, so we\u0026rsquo;ll change that file.\n$ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq  Generate the web site and verify the results. The posts now have the date displayed in them. There\u0026rsquo;s a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet\u0026rsquo;s assume, though, that we\u0026rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we\u0026rsquo;re going to create a section template.\nLet\u0026rsquo;s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq  Now we\u0026rsquo;ll update the post\u0026rsquo;s version of the single template. If you remember Hugo\u0026rsquo;s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq  Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn\u0026rsquo;t.\nDon\u0026rsquo;t Repeat Yourself DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you\u0026rsquo;re figuring that out, accept that you\u0026rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it\u0026rsquo;s okay to delay splitting up a template.\n"
},
{
	"uri": "/post/goisforlovers/",
	"title": "(Hu)go Template Primer",
	"tags": ["go", "golang", "templates", "themes", "development"],
	"description": "",
	"content": " Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.\nThis document is a brief primer on using go templates. The go docs provide more details.\nIntroduction to Go Templates Go templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that go templates parse very quickly.\nA unique characteristic of go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the go docs.\nBasic Syntax Go lang templates are html files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }}  Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }}  Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }}  Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }}  Variables Each go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;  Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}} {{ $address }}  Functions Go template ship with a few functions which provide basic functionality. The go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }}  Includes When including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }}  Logic Go templates provide the most basic iteration and conditional logic.\nIteration Just like in go, the go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }} {{ . }} {{ end }}  Example 2: Declaring value variable name\n{{range $element := array}} {{ $element }} {{ end }}  Example 2: Declaring key and value variable name\n{{range $index, $element := array}} {{ $index }} {{ $element }} {{ end }}  Conditionals If, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\n false 0 any array, slice, map, or string of length zero  Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }}  Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{else}} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }}  Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}}  Example 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }}  Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{ else if isset .Params \u0026quot;caption\u0026quot; }} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }}  Pipes One of the most powerful components of go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline\u0026rsquo;s output becomes the input of the following pipe.\nBecause of the very simple syntax of go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }}  is the same as\n{{ eq 1 1 | if }} Same {{ end }}  It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }}  Access the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Stuff Here {{ end }}  Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }} Stuff Here {{ end }}  Context (aka. the dot) The most easily overlooked concept to understand about go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n {{ $title := .Site.Title }} {{ range .Params.tags }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt; {{ end }}  Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters Hugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters In each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn\u0026rsquo;t make a lot of sense. We\u0026rsquo;ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n--- title: \u0026quot;Permalinks\u0026quot; date: \u0026quot;2013-11-18\u0026quot; aliases: - \u0026quot;/doc/permalinks/\u0026quot; groups: [\u0026quot;extras\u0026quot;] groups_weight: 30 notoc: true ---  Here is the corresponding code inside of the template:\n {{ if not .Params.notoc }} \u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt; {{ .TableOfContents }} \u0026lt;/div\u0026gt; {{ end }}  Using Site (config) Parameters In your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams: CopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34; TwitterUser: \u0026#34;spf13\u0026#34; SidebarRecentLimit: 5 Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt; \u0026lt;div class=\u0026quot;text-center\u0026quot;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt;{{end}}  An alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026quot;twitter\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;https://twitter.com/{{.}}\u0026quot; rel=\u0026quot;author\u0026quot;\u0026gt; \u0026lt;img src=\u0026quot;/images/twitter.png\u0026quot; width=\u0026quot;48\u0026quot; height=\u0026quot;48\u0026quot; title=\u0026quot;Twitter: {{.}}\u0026quot; alt=\u0026quot;Twitter\u0026quot;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt;{{end}}  Finally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026quot;recent\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{{.RelPermalink}}\u0026quot;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{end}}\u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt;  "
},
{
	"uri": "/categories/development/",
	"title": "Development",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/hugoisforlovers/",
	"title": "Getting Started with Hugo",
	"tags": ["go", "golang", "hugo", "development"],
	"description": "",
	"content": " Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at installing hugo\nStep 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\n Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo cd hugo /path/to/where/you/installed/hugo server --source=./docs \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Press ctrl+c to stop  Once you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site Stop the Hugo process by hitting ctrl+c.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content \u0026gt; Press ctrl+c to stop  Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 26 ms  Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building.. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun The best way to learn something is to play with it.\n"
},
{
	"uri": "/tags/development/",
	"title": "development",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/go/",
	"title": "go",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/categories/golang/",
	"title": "golang",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/templates/",
	"title": "templates",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/themes/",
	"title": "themes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/migrate-from-jekyll/",
	"title": "Migrate to Hugo from Jekyll",
	"tags": [],
	"description": "",
	"content": " Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ \u0026lt;root\u0026gt;/ ▾ images/ logo.png  should become\n▾ \u0026lt;root\u0026gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you\u0026rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site The default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you\u0026rsquo;ll want to do one of two alternatives:\n Change your submodule to point to map gh-pages to public instead of _site (recommended).\ngit submodule deinit _site git rm _site git submodule add -b gh-pages git@github.com:your-username/your-repo.git public  Or, change the Hugo configuration to use _site instead of public.\n{ .. \u0026quot;publishdir\u0026quot;: \u0026quot;_site\u0026quot;, .. }   Convert Jekyll templates to Hugo templates That\u0026rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll\u0026rsquo;s template documentation if you need to refresh your memory on how you built your blog and Hugo\u0026rsquo;s template to learn Hugo\u0026rsquo;s way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes Jekyll has plugins; Hugo has shortcodes. It\u0026rsquo;s fairly trivial to do a port.\nImplementation As an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll\u0026rsquo;s plugin:\nmodule Jekyll class ImageTag \u0026lt; Liquid::Tag @url = nil @caption = nil @class = nil @link = nil // Patterns IMAGE_URL_WITH_CLASS_AND_CAPTION = IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;(\\s+)-\u0026gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i IMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;/i IMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i IMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i def initialize(tag_name, markup, tokens) super if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK @class = $1 @url = $3 @caption = $7 @link = $9 elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION @class = $1 @url = $3 @caption = $7 elsif markup =~ IMAGE_URL_WITH_CAPTION @url = $1 @caption = $5 elsif markup =~ IMAGE_URL_WITH_CLASS @class = $1 @url = $3 elsif markup =~ IMAGE_URL @url = $1 end end def render(context) if @class source = \u0026quot;\u0026lt;figure class='#{@class}'\u0026gt;\u0026quot; else source = \u0026quot;\u0026lt;figure\u0026gt;\u0026quot; end if @link source += \u0026quot;\u0026lt;a href=\\\u0026quot;#{@link}\\\u0026quot;\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;img src=\\\u0026quot;#{@url}\\\u0026quot;\u0026gt;\u0026quot; if @link source += \u0026quot;\u0026lt;/a\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;figcaption\u0026gt;#{@caption}\u0026lt;/figcaption\u0026gt;\u0026quot; if @caption source += \u0026quot;\u0026lt;/figure\u0026gt;\u0026quot; source end end end Liquid::Template.register_tag('image', Jekyll::ImageTag)  is written as this Hugo shortcode:\n\u0026lt;!-- image --\u0026gt; \u0026lt;figure {{ with .Get \u0026quot;class\u0026quot; }}class=\u0026quot;{{.}}\u0026quot;{{ end }}\u0026gt; {{ with .Get \u0026quot;link\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt;{{ end }} \u0026lt;img src=\u0026quot;{{ .Get \u0026quot;src\u0026quot; }}\u0026quot; {{ if or (.Get \u0026quot;alt\u0026quot;) (.Get \u0026quot;caption\u0026quot;) }}alt=\u0026quot;{{ with .Get \u0026quot;alt\u0026quot;}}{{.}}{{else}}{{ .Get \u0026quot;caption\u0026quot; }}{{ end }}\u0026quot;{{ end }} /\u0026gt; {{ if .Get \u0026quot;link\u0026quot;}}\u0026lt;/a\u0026gt;{{ end }} {{ if or (or (.Get \u0026quot;title\u0026quot;) (.Get \u0026quot;caption\u0026quot;)) (.Get \u0026quot;attr\u0026quot;)}} \u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026quot;title\u0026quot; }} {{ .Get \u0026quot;title\u0026quot; }}{{ end }} {{ if or (.Get \u0026quot;caption\u0026quot;) (.Get \u0026quot;attr\u0026quot;)}}\u0026lt;p\u0026gt; {{ .Get \u0026quot;caption\u0026quot; }} {{ with .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt; {{ end }} {{ .Get \u0026quot;attr\u0026quot; }} {{ if .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/p\u0026gt; {{ end }} \u0026lt;/figcaption\u0026gt; {{ end }} \u0026lt;/figure\u0026gt; \u0026lt;!-- image --\u0026gt;  Usage I simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were \u0026quot;having fun\u0026quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; -\u0026gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}  to this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{% fig class=\u0026quot;full\u0026quot; src=\u0026quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\u0026quot; title=\u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; link=\u0026quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\u0026quot; %}}  As a bonus, the shortcode named parameters are, arguably, more readable.\nFinishing touches Fix content Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\nClean up You\u0026rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn\u0026rsquo;t used, delete it.\nA practical example in a diff Hey, it\u0026rsquo;s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.\n"
}]